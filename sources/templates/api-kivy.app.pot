# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-17 22:29\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.app.rst:3
# bebe3f616d57455cb8ea4d4aa15c6f34
msgid "Application"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:2
# 3ebe715de6764377a2369959fd763dd0
msgid "The :class:`App` class is the base for creating Kivy applications. Think of it as your main entry point into the Kivy run loop.  In most cases, you subclass this class and make your own app. You create an instance of your specific app class and then, when you are ready to start the application's life cycle, you call your instance's :func:`App.run` method."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:10
# 00c0ae3f5db341b9935d14a32b1d045d
msgid "Creating an Application"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:13
# 942c532897554d21baef72d2e7a4c971
msgid "Method using build() override"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:15
# 25fc95ff46174723a58c378fd3eda84f
msgid "To initialize your app with a widget tree, override the build() method in your app class and return the widget tree you constructed."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:18
# cb6e00513c33476aaf524f3cb1025edc
msgid "Here's an example of very simple application that just shows a button:"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:23
# bf53b4b549994000882cab3c0f444164
msgid "The file is also available in the examples folder at :file:`kivy/examples/application/app_with_build.py`."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:26
# ae90b6bae7dd44088486f560ca0b2853
msgid "Here, no widget tree was constructed (or if you will, a tree with only the root node)."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:31
# 47c9699e2b2043d19fd308485358838f
msgid "Method using kv file"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:33
# cd59c66d12a24025bdbc6f5bb5a75e2c
msgid "You can also use the :doc:`api-kivy.lang` for creating application. The .kv can contain rules and root widget definitions at the same time. Here is the same example as the Button one in a kv file."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:37
# e1be5e92cef741c087a265840c40a370
msgid "Contents of 'test.kv':"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:42
# 5793ac6b80c242499960e5c231e2c729
msgid "Contents of 'main.py':"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:47
# dfc8d16187014365ba9527b4c6f43723
msgid "See :file:`kivy/examples/application/app_with_kv.py`."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:49
# 840af0a0c28d48aa95194f4399b8acc6
msgid "The relation between main.py and test.kv is explained in :func:`App.load_kv`."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:53
# b0edd5e2ed8d41e19aee98da0c436624
msgid "Application configuration"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:58
# 97a10297683f4650b3664553a0c06297
msgid "Use the configuration file"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:60
# c000691efe3b469e9550191b18c53f79
msgid "Your application might want to have his own configuration file. The :class:`App` is able to handle a INI file automatically. You add your section/key/value in the :meth:`App.build_config` method by using the `config` parameters (instance of :class:`~kivy.config.ConfigParser`::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:72
# aeff959e27cc4747b80417550ab87a5f
msgid "As soon as you will add one section in the config, a file will be created on the disk, and be named from the mangled name of your class: \"TestApp\" will give a config filename \"test.ini\" with the content::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:80
# 85525d94f0934720838be25cd9766862
msgid "The \"test.ini\" will be automatically loaded at runtime, and you can access to the configuration in your :meth:`App.build` method::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:97
# d80787d32048400e81b50dc9aeb0e21e
msgid "Create a settings panel"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:99
# d8ab140812da4826afe422c23b278cc7
msgid "Your application can have a settings panel to let your user configure some of your config tokens. Here is an example done in the KinectViewer example (available in the examples directory):"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:106
# f595c4bc81a840c3a264a155931ccec3
msgid "You have the possibility to extends the default application settings with your own panel by extending the :meth:`App.build_settings` method. Check the :class:`~kivy.uix.settings.Settings` about how to create a panel, because you need a JSON file / data first."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:111
# 48cdf04e529444fe89225e4aec62d1be
msgid "Let's take as an example the previous snippet of TestApp with custom config. We could create a JSON like this::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:132
# 8ca4773c4b7545149cee7271ccbb2edb
msgid "Then, we can create a panel using this JSON to create automatically all the options, and link them to our :data:`App.config` ConfigParser instance::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:142
# 7befedac167a4540b888008da01ea969
msgid "That's all ! Now you can press F1 (default keystroke) for toggle the settings panel, or press the \"settings\" key on your android device. You can manually call :meth:`App.open_settings` and :meth:`App.close_settings` if you want. Every changes in the panel are automatically saved in the config file."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:147
# ec8c5e4210724c55ac3db9a201ca2bbc
msgid "However, you might want to know when a config value have been changed by the user, in order to adapt or reload your UI. You can overload the :meth:`on_config_change` method::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:161
# 7a12dab73bfd493eb57ba3007d3cf233
msgid "One last note, the Kivy configuration panel is added by default in the settings instance. If you don't want it, you can declare your Application like this::"
msgstr ""

#: ../../<autodoc>:1
# 9f2418e74f5c4c0da4db07eb63f1b88e
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App:1
# 11cb9bb0d33643faa566bb8189d07463
msgid "Application class, see module documentation for more information."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App:5
# 6600de07e9174122b454a3cf368d0d70
msgid "Fired when the application is being started (before the :func:`~kivy.base.runTouchApp` call."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App:8
# 79c4cd7bbadc43c79005336205fb2789
msgid "Fired when the application stops."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App:12
# 7f90cef8fe1147c281b25641cfabdf3f
msgid "If a kv_directory is set, it will be used to get the initial kv file. By default, the file is searched in the same directory as the current App definition file."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.build:1
# 7ff2c70c919c48f0998500886e077db4
msgid "Initializes the application; will be called only once. If this method returns a widget (tree), it will be used as the root widget and added to the window."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.build_config:3
# eda7ba62fc144865b531522ab5f3bfa2
msgid "This method is called before the application is initialized to construct your :class:`~kivy.config.ConfigParser` object. This is where you can put any default section / key / value for your config. If anything is set, the configuration will be automatically saved in the file returned by :meth:`get_application_config`."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.build_settings:3
# 9010c1a42d9a49de96462953870318f7
msgid "This method is called when the user (or you) want to show the application settings. This will be called only once, the first time when the user will show the settings."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.close_settings:1
# b2a30fbf971f456996c3861f602ba4ec
msgid "Close the previously opened settings panel."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.config:1
# 043ada179a254ad5ae750b793a68a9ee
msgid "Instance to the :class:`~kivy.config.ConfigParser` of the application configuration. Can be used to query some config token in the build()"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.directory:3
# 6601cc04f73e47bba64c7a160ed6e2fa
msgid "Return the directory where the application live"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.get_application_config:3
# 25e7706c55aa4a39a73c90c8d9aba5b4
msgid "Return the filename of your application configuration"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.get_application_icon:1
# a67a7d7fe1f54ed19a4300d0adf7ba4b
msgid "Return the icon of the application."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.get_application_name:1
# c9ff4c47b8d04e8eb182e00a52678dc6
msgid "Return the name of the application."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.icon:3
# f46f748782aa45efb29231f730baa0d6
msgid "Icon of your application. You can set by doing::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.icon:8
# 9baa19a244f8425495307fd3da68bcb0
msgid "The icon can be located in the same directory as your main file."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_config:1
# fe224cd208654b4eaf186bb5502c98c7
msgid "(internal) This function is used for returning a ConfigParser with the application configuration. It's doing 3 things:"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_config:4
# cd55ed08a8744419a94c582dbc7061a8
msgid "Create an instance of a ConfigParser"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_config:5
# 2697589ad25445d786db46ef816ca98b
msgid "Load the default configuration by calling :meth:`build_config`, then"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_config:7
# f9bcd5cd332a4518b946d02c91c828ba
msgid "If exist, load the application configuration file, or create it if it's not existing."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_kv:1
# bc7f9371beec4141aa3688b956fc87ca
msgid "This method is invoked the first time the app is being run if no widget tree has been constructed before for this app. This method then looks for a matching kv file in the same directory as the file that contains the application class."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_kv:6
# a1500a3c7ca54aebb5b4f6baec1a3bb8
msgid "For example, if you have a file named main.py that contains::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_kv:11
# 29b3e834e5de427cbbcf6d8e0ccaabe0
msgid "This method will search for a file named `showcase.kv` in the directory that contains main.py. The name of the kv file has to be the lowercase name of the class, without the 'App' postfix at the end if it exists."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_kv:16
# e8d39858bfa84a18a0e4b31e6f71aa23
msgid "You can define rules and a root widget in your kv file::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_kv:24
# a67082693dce49f68e787a48827a7481
msgid "There must be only one root widget. See the :doc:`api-kivy.lang` documentation for more information on how to create kv files. If your kv file contains a root widget, it will be used as self.root, the root widget for the application."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.name:3
# 9d2961ab379a484eac55b43cb53da947
msgid "Return the name of the application, based on the class name"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.on_config_change:1
# 1c1d55eed529451a8eebe6a06a1e5ebe
msgid "Event handler fired when one configuration token have been changed by the settings page."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.on_start:1
# 23897e475de3452cab3291b7db27d74a
msgid "Event handler for the on_start event, which is fired after initialization (after build() has been called), and before the application is being run."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.on_stop:1
# 8dd80cfb15f84a8a9a6dbbe49a41b96f
msgid "Event handler for the on_stop event, which is fired when the application has finished running (e.g. the window is about to be closed)."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.open_settings:1
# f5491b0afd8849ab864d252f025cf533
msgid "Open the application settings panel. It will be created the very first time. Then the settings panel will be added to the Window attached to your application (automatically done by :meth:`run`)"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.options:1
# 81b2d0b6f1a54112953c311498b55925
msgid "Options passed to the __init__ of the App"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.root:1
# b515b5fedf0145e4b64867d9e8584084
msgid "Root widget set by the :func:`build` method or by the :func:`load_kv` method if the kv file contains a root widget."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.run:1
# 53c069ff919141b5ac2f78f4d0e5b671
msgid "Launches the app in standalone mode."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.stop:1
# 5caa91dda2494277b6ae560506d4cb8b
msgid "Stop the application."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.stop:3
# d1557c150c0c46798c9cd22c663408c0
msgid "If you use this method, the whole application will stop by issuing a call to :func:`~kivy.base.stopTouchApp`."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.title:3
# 2f86d577b452461e9c197e0501460990
msgid "Title of your application. You can set by doing::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.use_kivy_settings:3
# ea9d604181b742419e27708dfd35d9f1
msgid "If True, the application settings will include also the Kivy settings. If you don't want the user to change any kivy settings from your settings UI, change this to False."
msgstr ""

