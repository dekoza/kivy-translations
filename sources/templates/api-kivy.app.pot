# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-23 16:59\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.app.rst:3
# ce2e4ad6db8d4871af5c0eee5c6b8483
msgid "Application"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:2
# 9aad8df287ac495fb6ba43ed68ea7ba1
msgid "The :class:`App` class is the base for creating Kivy applications. Think of it as your main entry point into the Kivy run loop.  In most cases, you subclass this class and make your own app. You create an instance of your specific app class and then, when you are ready to start the application's life cycle, you call your instance's :func:`App.run` method."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:10
# 02a20753179d4e1384e4093862d1238a
msgid "Creating an Application"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:13
# dfb47edca09d4a2d8a7099a821d6164a
msgid "Method using build() override"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:15
# 159bb8ec76264dd8aeb1241673071c70
msgid "To initialize your app with a widget tree, override the build() method in your app class and return the widget tree you constructed."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:18
# 1dadf0b3f3134df6b4269e890d28e75a
msgid "Here's an example of very simple application that just shows a button:"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:23
# b1869d1c43cd47898215ca080f710f2d
msgid "The file is also available in the examples folder at :file:`kivy/examples/application/app_with_build.py`."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:26
# 9dbda87f18c64a389c9b12d28d83a1bd
msgid "Here, no widget tree was constructed (or if you will, a tree with only the root node)."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:31
# 7de464f6c2fb45eb925b506ce5e5fbc7
msgid "Method using kv file"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:33
# 4db121d64a164a98b0638ba1285fdef7
msgid "You can also use the :doc:`api-kivy.lang` for creating application. The .kv can contain rules and root widget definitions at the same time. Here is the same example as the Button one in a kv file."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:37
# 2d41907f608843a3a7f5b007fd4afa73
msgid "Contents of 'test.kv':"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:42
# be16f82e924d4fb5bb7d51f6efcff76e
msgid "Contents of 'main.py':"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:47
# 2023d9a18b2749cb91fc443aa4285f31
msgid "See :file:`kivy/examples/application/app_with_kv.py`."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:49
# 3100f02836ff4284b292e930fd4ef519
msgid "The relation between main.py and test.kv is explained in :func:`App.load_kv`."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:53
# 38f2a4d306224f4d82041435f9085e8a
msgid "Application configuration"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:58
# 61062d496a2143d498983d8728c4a0ad
msgid "Use the configuration file"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:60
# 154f073d265d4cb39b8e0e6340e00296
msgid "Your application might want to have his own configuration file. The :class:`App` is able to handle a INI file automatically. You add your section/key/value in the :meth:`App.build_config` method by using the `config` parameters (instance of :class:`~kivy.config.ConfigParser`::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:72
# 6194b34080704545af4edba284f980c1
msgid "As soon as you will add one section in the config, a file will be created on the disk, and be named from the mangled name of your class: \"TestApp\" will give a config filename \"test.ini\" with the content::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:80
# d4f6ccb979e242f8867e6563221a02fb
msgid "The \"test.ini\" will be automatically loaded at runtime, and you can access to the configuration in your :meth:`App.build` method::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:97
# 0ba7ab0c0edb4ec9b2eab2d2ae9ee077
msgid "Create a settings panel"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:99
# ab02bae951ba4e9eb98f1b22bb8a98c3
msgid "Your application can have a settings panel to let your user configure some of your config tokens. Here is an example done in the KinectViewer example (available in the examples directory):"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:106
# aa15d25fb7774610bd173997a74cd512
msgid "You have the possibility to extends the default application settings with your own panel by extending the :meth:`App.build_settings` method. Check the :class:`~kivy.uix.settings.Settings` about how to create a panel, because you need a JSON file / data first."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:111
# 04412cffbe284e27b19a8ac7ce58e3c8
msgid "Let's take as an example the previous snippet of TestApp with custom config. We could create a JSON like this::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:132
# 03ba0a90fe024f81af4101df2c6dffc8
msgid "Then, we can create a panel using this JSON to create automatically all the options, and link them to our :data:`App.config` ConfigParser instance::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:142
# c50db8e8f7764b49a11ee6c6d44a67ae
msgid "That's all ! Now you can press F1 (default keystroke) for toggle the settings panel, or press the \"settings\" key on your android device. You can manually call :meth:`App.open_settings` and :meth:`App.close_settings` if you want. Every changes in the panel are automatically saved in the config file."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:147
# f3ea76b4eef9400dbe0260d157bdc44a
msgid "However, you might want to know when a config value have been changed by the user, in order to adapt or reload your UI. You can overload the :meth:`on_config_change` method::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app:161
# 0c52096834414e768bf40f2d9d2454af
msgid "One last note, the Kivy configuration panel is added by default in the settings instance. If you don't want it, you can declare your Application like this::"
msgstr ""

#: ../../<autodoc>:1
# 5e927abf6a31480a9765ae34f05d19fb
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App:1
# a7e9ac793f984511b3ee11c9f00a551f
msgid "Application class, see module documentation for more information."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App:5
# ea5d0ef880464110a07b91e75493bc84
msgid "Fired when the application is being started (before the :func:`~kivy.base.runTouchApp` call."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App:8
# 0d189847eaf449a99e1896b54b8fea2c
msgid "Fired when the application stops."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App:12
# 86188cf0b13c403a9548486e51c5cd05
msgid "If a kv_directory is set, it will be used to get the initial kv file. By default, the file is searched in the same directory as the current App definition file."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.build:1
# b0248f491ecc4f0c8acac585947f5214
msgid "Initializes the application; will be called only once. If this method returns a widget (tree), it will be used as the root widget and added to the window."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.build_config:3
# 18360256893042089f90a53333f4f8f4
msgid "This method is called before the application is initialized to construct your :class:`~kivy.config.ConfigParser` object. This is where you can put any default section / key / value for your config. If anything is set, the configuration will be automatically saved in the file returned by :meth:`get_application_config`."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.build_settings:3
# bcdc9facc816468d8ef305cc6991a930
msgid "This method is called when the user (or you) want to show the application settings. This will be called only once, the first time when the user will show the settings."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.close_settings:1
# 842c3293e0f246ffa2e4a138cc127e04
msgid "Close the previously opened settings panel."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.config:1
# 5f959c86211a45cfa630cf269c50c1fa
msgid "Instance to the :class:`~kivy.config.ConfigParser` of the application configuration. Can be used to query some config token in the build()"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.directory:3
# f25e1d05c48a43f6a06bf89008212ebd
msgid "Return the directory where the application live"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.get_application_config:3
# 67e6b72848e940e5b0df361f3b9e0b45
msgid "Return the filename of your application configuration"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.get_application_icon:1
# f996476fb81141658063efda5726c6cb
msgid "Return the icon of the application."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.get_application_name:1
# 4c2019e4f6494db2863208531e4c4f2c
msgid "Return the name of the application."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.icon:3
# 825362adfc574c37831f3d5706e7bad8
msgid "Icon of your application. You can set by doing::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.icon:8
# a00c84b645804f199f61937b5056176e
msgid "The icon can be located in the same directory as your main file."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_config:1
# 2ab7c830cf414d398961218d4f6bc5fa
msgid "(internal) This function is used for returning a ConfigParser with the application configuration. It's doing 3 things:"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_config:4
# 6a9cdde3341543feb1aa5ef4ecd87511
msgid "Create an instance of a ConfigParser"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_config:5
# 144a0e97a07345e8b65d834bce38cf9b
msgid "Load the default configuration by calling :meth:`build_config`, then"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_config:7
# d12436dace1248a9a8f888852f6e7e6e
msgid "If exist, load the application configuration file, or create it if it's not existing."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_kv:1
# b14c313faf944fb4b96c2f18e5214c40
msgid "This method is invoked the first time the app is being run if no widget tree has been constructed before for this app. This method then looks for a matching kv file in the same directory as the file that contains the application class."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_kv:6
# 02af31a9b8bc4e119f98cdc3623d4b6f
msgid "For example, if you have a file named main.py that contains::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_kv:11
# f65f3398d0154cd3a61263d84059954f
msgid "This method will search for a file named `showcase.kv` in the directory that contains main.py. The name of the kv file has to be the lowercase name of the class, without the 'App' postfix at the end if it exists."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_kv:16
# 345e97bfaeb94021bce79b8fd804a350
msgid "You can define rules and a root widget in your kv file::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.load_kv:24
# 8c16421f7a6541d4ac40d94719836a1e
msgid "There must be only one root widget. See the :doc:`api-kivy.lang` documentation for more information on how to create kv files. If your kv file contains a root widget, it will be used as self.root, the root widget for the application."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.name:3
# 0389e5f1ed834a159031a102e399c8ef
msgid "Return the name of the application, based on the class name"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.on_config_change:1
# 4bacfed59f624fd5816840150266f0d1
msgid "Event handler fired when one configuration token have been changed by the settings page."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.on_start:1
# 248e8596ad1945718c1951a721e1b0ac
msgid "Event handler for the on_start event, which is fired after initialization (after build() has been called), and before the application is being run."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.on_stop:1
# 181e64e1e8d140dfac40af54215a0d6d
msgid "Event handler for the on_stop event, which is fired when the application has finished running (e.g. the window is about to be closed)."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.open_settings:1
# 19efa90cac2e446496d1ef245d4aa6ce
msgid "Open the application settings panel. It will be created the very first time. Then the settings panel will be added to the Window attached to your application (automatically done by :meth:`run`)"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.options:1
# bc947bb0ac5241c0a5a1f6468d1b815e
msgid "Options passed to the __init__ of the App"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.root:1
# 442f513aa9584566b2461c279ebaa6e5
msgid "Root widget set by the :func:`build` method or by the :func:`load_kv` method if the kv file contains a root widget."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.run:1
# 8a6e3929dd094398ad5cf4af4dddf90f
msgid "Launches the app in standalone mode."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.stop:1
# 2a164ec779d140938aa190be148c6a3a
msgid "Stop the application."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.stop:3
# 11232d7c68144446be1ae7615e252bb4
msgid "If you use this method, the whole application will stop by issuing a call to :func:`~kivy.base.stopTouchApp`."
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.title:3
# 2e9641ef2cfd4dacaed2e30ece4f091d
msgid "Title of your application. You can set by doing::"
msgstr ""

#: ../../../kivy/app.py:docstring of kivy.app.App.use_kivy_settings:3
# 479ec802e34640db93d529a583b28544
msgid "If True, the application settings will include also the Kivy settings. If you don't want the user to change any kivy settings from your settings UI, change this to False."
msgstr ""

