# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-21 16:56\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.base.rst:3
# bdc649690da341b3aa6003c12541c013
msgid "Event loop management"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoop:1
# 2d94497349824ebc8c7f6d7ad584ecdc
msgid "EventLoop instance"
msgstr ""

#: ../../<autodoc>:1
# a3f49c14fecf4e73925f376efff8b39e
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase:1
# 0b3c54b8d6bc45c49cf1051db23fbdcb
msgid "Main event loop. This loop handle update of input + dispatch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_event_listener:1
# 056d114bb5cb470f8deb56f22356b1f8
msgid "Add a new event listener for getting touch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_input_provider:1
# 123304208bff422aba31110715726ee8
msgid "Add a new input provider to listen for touch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_postproc_module:1
# 4f45a586335a4fb0b302240dbc77b99a
msgid "Add a postproc input module (DoubleTap, RetainTouch are default)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.close:1
# 27faf2d6641440b1b67e9287f647f713
msgid "Exit from the main loop, and stop all configured input providers."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.dispatch_input:1
# ef07f0893e934bf284ba7395d531a2f2
msgid "Called by idle() to read events from input providers, pass event to postproc, and dispatch final events."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.ensure_window:1
# 55df8ac460ad4e0e9136333318a823fd
msgid "Ensure that we have an window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.exit:1
# 5b65408bb3064a2a8a85d20b741583f0
msgid "Close the main loop, and close the window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.idle:1
# a64894f6c25c4080b8fa80a650502ab1
msgid "This function is called every frames. By default : * it \"tick\" the clock to the next frame * read all input and dispatch event * dispatch on_update + on_draw + on_flip on window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_pause:1
# 3dcdb1646ea04018bf403f91c01ad03a
msgid "Event handler for on_pause, will be fired when the event loop is paused."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_start:1
# d98acf00dddb45c2a2092052d92afb45
msgid "Event handler for on_start, will be fired right after all input providers have been started."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_stop:1
# de8ff7d5f504442aa98e80c1c94a23bc
msgid "Event handler for on_stop, will be fired right after all input providers have been stopped."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.post_dispatch_input:1
# 1183b844de00465cb9d5ed5069644b78
msgid "This function is called by dispatch_input() when we want to dispatch a input event. The event is dispatched into all listeners, and if grabbed, it's dispatched through grabbed widgets"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_event_listener:1
# 1c52d19c16c147f9bb83ad3fc9f08ff9
msgid "Remove a event listener from the list"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_input_provider:1
# 26d51bd834bc41d5830d338203be1a2a
msgid "Remove an input provider"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_postproc_module:1
# f71b5e3ca89343acb11d6f2ddad58b91
msgid "Remove a postproc module"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.run:1
# d214bbd0a65f418da88d4283a6e42806
msgid "Main loop"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.set_window:1
# 7d0f9eb4fc1a4590a686b8fdc0050216
msgid "Set the window used for event loop"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.start:1
# 155d0b452f1441f881307010e677b091
msgid "Must be call only one time before run(). This start all configured input providers."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.stop:1
# e1f2d5df209644e28ae9ae302ee3fc98
msgid "Stop all input providers and call callbacks registered using EventLoop.add_stop_callback()"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.touches:1
# d43662dab08444698acdd56d5eaa95c8
msgid "Return the list of all touches currently in down or move state"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionManager:1
# 7516afaec5254cc38823b66b881d28dc
msgid "Kivy Exception Manager instance"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler:1
# 047302ce576a4e3fa9e70f62bdb908ca
msgid "Base handler that catch exception in runTouchApp(). You can derivate and use it like this ::"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler:11
# f0e35f37fe104477a5c246aabbe95194
msgid "All exceptions will be set to PASS, and logged to console !"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler.handle_exception:1
# fc7e1c182e594e40bf0a7c1e445bb828
msgid "Handle one exception, default return ExceptionManager.STOP"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:1
# 685fc0a0ee674d198d7bf3a9e74ba6ce
msgid "Static main function that starts the application loop. You got some magic things, if you are using argument like this :"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:6
# cd75319d199e4c96bd4634a373663edd
msgid "To make dispatching work, you need at least one input listener. If not, application will leave. (MTWindow act as an input listener)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:11
# add5d54be9f44181bf94730cce836085
msgid "If you pass only a widget, a MTWindow will be created, and your widget will be added on the window as the root widget."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:16
# d95dfd4ac85c45af8a9d4597f05363c3
msgid "No event dispatching are done. This will be your job."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:19
# 44d6b40b74a146fb9f41136633424e77
msgid "No event dispatching are done. This will be your job, but we are trying to get the window (must be created by you before), and add the widget on it. Very usefull for embedding Kivy in another toolkit. (like Qt, check kivy-designed)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.stopTouchApp:1
# 687c3d4a613c415685a5091990d00e78
msgid "Stop the current application by leaving the main loop"
msgstr ""

