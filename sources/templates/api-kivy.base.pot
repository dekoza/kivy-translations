# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-18 09:08\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.base.rst:3
# e11633eaadf24f91904bcf63dd96cd82
msgid "Event loop management"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoop:1
# 9195ded1e8d6446dae2ed6413c54083f
msgid "EventLoop instance"
msgstr ""

#: ../../<autodoc>:1
# 18be4f7992f74d6f833735f9d01e8c46
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase:1
# bf3bc10876564f8badb23b86f1c8e237
msgid "Main event loop. This loop handle update of input + dispatch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_event_listener:1
# 27cf231afdca4827b096216bb92e3778
msgid "Add a new event listener for getting touch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_input_provider:1
# da9c3dc746ba4771945cf85800ee020c
msgid "Add a new input provider to listen for touch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_postproc_module:1
# 210bf901059d4f7c8b1a920ed0779320
msgid "Add a postproc input module (DoubleTap, RetainTouch are default)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.close:1
# ef519803c2da4cc9a0bcb79ce215f66c
msgid "Exit from the main loop, and stop all configured input providers."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.dispatch_input:1
# 8ada54ac5024430a9479b57a906a6861
msgid "Called by idle() to read events from input providers, pass event to postproc, and dispatch final events."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.ensure_window:1
# 41a26e37d35c431d9a6bc9bd184bacf7
msgid "Ensure that we have an window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.exit:1
# ddb83fe8b0ae4b0c8d661bf79880d6fa
msgid "Close the main loop, and close the window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.idle:1
# f1ab2ce8e71b432ab631568f8a94e1bd
msgid "This function is called every frames. By default : * it \"tick\" the clock to the next frame * read all input and dispatch event * dispatch on_update + on_draw + on_flip on window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_pause:1
# d5e56144c5a44a3b949ded25ab2600e0
msgid "Event handler for on_pause, will be fired when the event loop is paused."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_start:1
# da9c037b0b62418b9f73da676de5ddda
msgid "Event handler for on_start, will be fired right after all input providers have been started."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_stop:1
# 3a151fc18a834cbbbecbec547104ecb3
msgid "Event handler for on_stop, will be fired right after all input providers have been stopped."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.post_dispatch_input:1
# 516396ab895a4c568b2fa0558646753e
msgid "This function is called by dispatch_input() when we want to dispatch a input event. The event is dispatched into all listeners, and if grabbed, it's dispatched through grabbed widgets"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_event_listener:1
# cc22d3d6649543efa117a66dacfca843
msgid "Remove a event listener from the list"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_input_provider:1
# 34ccce75b00f4fe594b28c6548a6c740
msgid "Remove an input provider"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_postproc_module:1
# 4b57a90fd21f4caca83090f769d749d4
msgid "Remove a postproc module"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.run:1
# acecc11401db415186ffe2a5c45edb9e
msgid "Main loop"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.set_window:1
# 29a7049f680348adaaa1cca5e5f7ec3b
msgid "Set the window used for event loop"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.start:1
# c718e1afe5d042f1a3a44ea41156e034
msgid "Must be call only one time before run(). This start all configured input providers."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.stop:1
# b062279f980d4fd4a1b838d663bfb135
msgid "Stop all input providers and call callbacks registered using EventLoop.add_stop_callback()"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.touches:1
# a77df3e1214e4e2988cabf6918b14426
msgid "Return the list of all touches currently in down or move state"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionManager:1
# 6498a7bc1c44480e8ef47448ae560437
msgid "Kivy Exception Manager instance"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler:1
# c3f1158362ed4870802516911f86a88c
msgid "Base handler that catch exception in runTouchApp(). You can derivate and use it like this ::"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler:11
# 5e6137796b754eeb998d2103fb3980cd
msgid "All exceptions will be set to PASS, and logged to console !"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler.handle_exception:1
# d9d8155a5841450e88acc6a6c808691a
msgid "Handle one exception, default return ExceptionManager.STOP"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:1
# 9db3c79cb2c648a9ae321495c0a7e18b
msgid "Static main function that starts the application loop. You got some magic things, if you are using argument like this :"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:6
# d58ff83adeab4904ad721f7be5c87a0e
msgid "To make dispatching work, you need at least one input listener. If not, application will leave. (MTWindow act as an input listener)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:11
# df5d393668ba484fbad2a0a7d2888bec
msgid "If you pass only a widget, a MTWindow will be created, and your widget will be added on the window as the root widget."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:16
# 4d380dd6df1a4d92bb977126b7959419
msgid "No event dispatching are done. This will be your job."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:19
# cd250c15253c4321a2d6c566077283cc
msgid "No event dispatching are done. This will be your job, but we are trying to get the window (must be created by you before), and add the widget on it. Very usefull for embedding Kivy in another toolkit. (like Qt, check kivy-designed)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.stopTouchApp:1
# f37ccae0d78149cfa8103ec13b287696
msgid "Stop the current application by leaving the main loop"
msgstr ""

