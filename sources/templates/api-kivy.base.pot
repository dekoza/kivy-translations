# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-18 21:58\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.base.rst:3
# fe494392e98b419b8e2309a33916441d
msgid "Event loop management"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoop:1
# 0d2d0a84e3ce434a97a245d00ff2cd59
msgid "EventLoop instance"
msgstr ""

#: ../../<autodoc>:1
# 3e3851756e3c423a92584da92fc03e47
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase:1
# 15791a0db92c488ca4bd50a3f23accbf
msgid "Main event loop. This loop handle update of input + dispatch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_event_listener:1
# d831775484744b2b906a23a6a45137d9
msgid "Add a new event listener for getting touch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_input_provider:1
# eb6cf3f6364748778285b85a412f23b6
msgid "Add a new input provider to listen for touch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_postproc_module:1
# 8f9c18a7cc0c4214953cf12294c14cc6
msgid "Add a postproc input module (DoubleTap, RetainTouch are default)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.close:1
# 425b30658797464796c1a374b91dfb35
msgid "Exit from the main loop, and stop all configured input providers."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.dispatch_input:1
# b21b2ee8ed5c40a2ac5702e489006023
msgid "Called by idle() to read events from input providers, pass event to postproc, and dispatch final events."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.ensure_window:1
# 0ecd746a9bcd4f4f90c18cd8542a719a
msgid "Ensure that we have an window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.exit:1
# 42618d2c7c86419fa0258611ae724986
msgid "Close the main loop, and close the window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.idle:1
# a4e45769d1224e02bac0ad8bd5d1915c
msgid "This function is called every frames. By default : * it \"tick\" the clock to the next frame * read all input and dispatch event * dispatch on_update + on_draw + on_flip on window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_pause:1
# 472b3db13dc8489e9266e3e198c3d0ea
msgid "Event handler for on_pause, will be fired when the event loop is paused."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_start:1
# 0a142cd8ec0b47d78ac74928de92816b
msgid "Event handler for on_start, will be fired right after all input providers have been started."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_stop:1
# 05977b437fc544039f4ecfbefe34b03e
msgid "Event handler for on_stop, will be fired right after all input providers have been stopped."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.post_dispatch_input:1
# 2f16a33a47ab446691e6904dd4b621ff
msgid "This function is called by dispatch_input() when we want to dispatch a input event. The event is dispatched into all listeners, and if grabbed, it's dispatched through grabbed widgets"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_event_listener:1
# bf16dd3b77224beb9ae56fe511c06d97
msgid "Remove a event listener from the list"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_input_provider:1
# dbec95c51537407ab7f8f881d4f6d3c9
msgid "Remove an input provider"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_postproc_module:1
# d93248a7350148398a747704f9c097c4
msgid "Remove a postproc module"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.run:1
# 5c1dcfc856be4b73b059a5013960dcb3
msgid "Main loop"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.set_window:1
# b13204454c4642ec8284d651f16fe8eb
msgid "Set the window used for event loop"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.start:1
# 163631c318e34452bcefd53ed4b5c75c
msgid "Must be call only one time before run(). This start all configured input providers."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.stop:1
# ad25bb9daaab44d188b4c42796b93b24
msgid "Stop all input providers and call callbacks registered using EventLoop.add_stop_callback()"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.touches:1
# d6933ced9d1e4334bec0a0e19e35f0e1
msgid "Return the list of all touches currently in down or move state"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionManager:1
# 6dea6d51aba84bcea8eb4bbe56bde8f5
msgid "Kivy Exception Manager instance"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler:1
# d1b8f50d52f34a61b227ea566e341494
msgid "Base handler that catch exception in runTouchApp(). You can derivate and use it like this ::"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler:11
# 3a1ab153f942430181f3a992ba275a4c
msgid "All exceptions will be set to PASS, and logged to console !"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler.handle_exception:1
# d0befce1b061487d9fb5351fa852f4e5
msgid "Handle one exception, default return ExceptionManager.STOP"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:1
# 79c824796e644ddfb70a48a8ea81cc41
msgid "Static main function that starts the application loop. You got some magic things, if you are using argument like this :"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:6
# 75c70c8d0cca459c9212498aab447327
msgid "To make dispatching work, you need at least one input listener. If not, application will leave. (MTWindow act as an input listener)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:11
# 6dadfbb6f2d84495804db25a9c0c8dbf
msgid "If you pass only a widget, a MTWindow will be created, and your widget will be added on the window as the root widget."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:16
# 938dc02d4b3f411caf77467e9fc2afa0
msgid "No event dispatching are done. This will be your job."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:19
# 23866ed1ce954ea38ab387d40685f5ee
msgid "No event dispatching are done. This will be your job, but we are trying to get the window (must be created by you before), and add the widget on it. Very usefull for embedding Kivy in another toolkit. (like Qt, check kivy-designed)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.stopTouchApp:1
# c105ab7b14d44e5a984cd9df9f51d806
msgid "Stop the current application by leaving the main loop"
msgstr ""

