# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-14 16:32\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.base.rst:3
# 35ff7bc4e19347e49f9e4e5a257fb244
msgid "Event loop management"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoop:1
# 8aefa7bf0cf349c2b5b22e94498fffbc
msgid "EventLoop instance"
msgstr ""

#: ../../<autodoc>:1
# 701b50809d494f778c557044a333f4bd
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase:1
# ea70b79edfef4a7ea0db1ce412bfe609
msgid "Main event loop. This loop handle update of input + dispatch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_event_listener:1
# 456a57ae484f428ea363ae921f7a3a65
msgid "Add a new event listener for getting touch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_input_provider:1
# 6ac965ff38b14a218e626cbaf6fecb35
msgid "Add a new input provider to listen for touch event"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.add_postproc_module:1
# 99c057757e27494e90fba9ec61809511
msgid "Add a postproc input module (DoubleTap, RetainTouch are default)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.close:1
# d4d2a43644454466b4642971821fefad
msgid "Exit from the main loop, and stop all configured input providers."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.dispatch_input:1
# 0b1462f7fbf6486ba1afb69d919deba7
msgid "Called by idle() to read events from input providers, pass event to postproc, and dispatch final events."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.ensure_window:1
# 8756a21d783d4a12aeb3dd8ffe7381de
msgid "Ensure that we have an window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.exit:1
# c6fe0954d2dc479180287378fc423662
msgid "Close the main loop, and close the window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.idle:1
# 1c1bc973476642a9be47ba7648b6a226
msgid "This function is called every frames. By default : * it \"tick\" the clock to the next frame * read all input and dispatch event * dispatch on_update + on_draw + on_flip on window"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_pause:1
# ab4ced4130ed472b959992c85ecbfdf1
msgid "Event handler for on_pause, will be fired when the event loop is paused."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_start:1
# 512ce79f49a6426cb71a9ee2fa4f9f09
msgid "Event handler for on_start, will be fired right after all input providers have been started."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.on_stop:1
# 644a206cba7c428f94f5e46b38da5ad1
msgid "Event handler for on_stop, will be fired right after all input providers have been stopped."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.post_dispatch_input:1
# 0def6c0738dd4f21b620efd0857a9d57
msgid "This function is called by dispatch_input() when we want to dispatch a input event. The event is dispatched into all listeners, and if grabbed, it's dispatched through grabbed widgets"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_event_listener:1
# 0dfe05a74d684b768fcc2c3aa21ea0e2
msgid "Remove a event listener from the list"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_input_provider:1
# c91c3e72f13e480cacdcfe318755ad23
msgid "Remove an input provider"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.remove_postproc_module:1
# f2c65be3eaa94d3da4649a6bf921e6e1
msgid "Remove a postproc module"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.run:1
# 923cc2a301034a4c93b88fec405fa8e9
msgid "Main loop"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.set_window:1
# f5129148557f42bd8d3c8825b8090cb6
msgid "Set the window used for event loop"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.start:1
# a68d300ede5b4bfcaf7c3c1b5ba53e3d
msgid "Must be call only one time before run(). This start all configured input providers."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.stop:1
# a453b099293f4a40b30df97985d9064f
msgid "Stop all input providers and call callbacks registered using EventLoop.add_stop_callback()"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.EventLoopBase.touches:1
# 1b5ba50794bc4de6ba048fa8d388df54
msgid "Return the list of all touches currently in down or move state"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionManager:1
# 3cd0c7f618c742a9a70a825135cf127d
msgid "Kivy Exception Manager instance"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler:1
# d436c66974fc472a9f678911d1c2524a
msgid "Base handler that catch exception in runTouchApp(). You can derivate and use it like this ::"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler:11
# c65010c2f8ea46bf9b1de84a886a77c3
msgid "All exceptions will be set to PASS, and logged to console !"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.ExceptionHandler.handle_exception:1
# 4a642a335c3d4e16a215062ebf8eaea3
msgid "Handle one exception, default return ExceptionManager.STOP"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:1
# c38d02ec94b045f889e50efebdff3964
msgid "Static main function that starts the application loop. You got some magic things, if you are using argument like this :"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:6
# 9afce8dc4b3d46dd9311e1a723224f1a
msgid "To make dispatching work, you need at least one input listener. If not, application will leave. (MTWindow act as an input listener)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:11
# cf33ac87f5c64f6ca0059c375dc52787
msgid "If you pass only a widget, a MTWindow will be created, and your widget will be added on the window as the root widget."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:16
# bdfd974e9c6e45b898a28de3d34ad14d
msgid "No event dispatching are done. This will be your job."
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.runTouchApp:19
# 7eb99fa91426485db1510da31962d6b8
msgid "No event dispatching are done. This will be your job, but we are trying to get the window (must be created by you before), and add the widget on it. Very usefull for embedding Kivy in another toolkit. (like Qt, check kivy-designed)"
msgstr ""

#: ../../../kivy/base.py:docstring of kivy.base.stopTouchApp:1
# 90011b4dcdea40fc9f93ecc5458ec155
msgid "Stop the current application by leaving the main loop"
msgstr ""

