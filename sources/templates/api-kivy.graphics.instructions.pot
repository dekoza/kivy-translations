# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-22 01:34\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.graphics.instructions.rst:3
# 404208922abb40dabf1b7079c6da6d3f
msgid "Canvas"
msgstr ""

#: ../../docstring of kivy.graphics.instructions:2
# 4daaee7892c449ae9c544fd0970809b6
msgid "The :class:`Canvas` is the root object used for drawing by a :class:`~kivy.uix.widget.Widget`. Check the class documentation for more information about the usage of Canvas."
msgstr ""

#: ../../<autodoc>:1
# dbbd4fc4ab64416489727c64c86bd9d1
msgid "Bases: :class:`object`"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Instruction:1
# 0e9114dcdfad4200b8560fb25828ec92
msgid "Represents the smallest instruction available. This class is for internal usage only, don't use it directly."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
# 321e6c1bce6842d7bed0e7e77855450f
# e7a6d99978d34b6b9924a8b54c63bca8
# 1d0b05da6de549019c694eea9bb3c73d
# f61e339644214b2a83d7de1748d4801e
msgid "Bases: :class:`kivy.graphics.instructions.Instruction`"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.InstructionGroup:1
# f376a9f38d5047b58a2e717613301f17
msgid "Group of :class:`Instruction`. Adds the possibility of adding and removing graphics instruction."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.InstructionGroup.get_group:1
# c219ca7546794f5c8bd5498bf6fd5182
msgid "group name."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.ContextInstruction:1
# 29d427651c684a859e83e2d27d43a79e
msgid "The ContextInstruction class is the base for the creation of instructions that don't have a direct visual representation, but instead modify the current Canvas' state, e.g. texture binding, setting color parameters, matrix manipulation and so on."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.VertexInstruction:1
# da90b1579bf94b759492e49a29ca8dc1
msgid "The VertexInstruction class is the base for all graphics instructions that have a direct visual representation on the canvas, such as Rectangles, Triangles, Lines, Ellipse and so on."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.VertexInstruction.source:1
# d1ab999141eb443cadc3e554a025957a
msgid "This property represents the filename to load the texture from. If you want to use an image as source, do it like this::"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.VertexInstruction.source:7
# 3fb483abb2fc43deb1d298658ad20d07
msgid "Here's the equivalent in Kivy language::"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.VertexInstruction.source:18
# 76f8db1f4c8745db99709e6f97cdebab
msgid "The filename will be searched with the :func:`kivy.resources.resource_find` function."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.VertexInstruction.tex_coords:1
# af39c74e6a89445cbd45f1013410f954
msgid "This property represents the texture coordinates used for drawing the vertex instruction. The value must be a list of 8 values."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.VertexInstruction.tex_coords:4
# 86ac6d386d2c4bcfad21f065b46dc9fd
msgid "A texture coordinate has a position (u, v), and a size (w, h). The size can be negative, and would represent the 'flipped' texture. By default, the tex_coords are::"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.VertexInstruction.tex_coords:10
# 2f256b6de5a54494bb13975dd646dbab
msgid "You can pass your own texture coordinates, if you want to achieve fancy effects."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.VertexInstruction.tex_coords:15
# 7401f7bb9a4e4bacacbc261ed593e357
msgid "The default value as mentioned before can be negative. Depending on the image and label providers, the coordinates are flipped vertically, because of the order in which the image is internally stored. Instead of flipping the image data, we are just flipping the texture coordinates to be faster."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.VertexInstruction.texture:1
# 63dfc04bea814df9a8f019a24af7b846
msgid "Property that represents the texture used for drawing this Instruction. You can set a new texture like this::"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.VertexInstruction.texture:10
# 99f9a043f1094e24999810303b9e6e13
msgid "Usually, you will use the :data:`source` attribute instead of the texture."
msgstr ""

#: ../../<autodoc>:1
# bbe947aa99ca41559c9c672325ce9729
msgid "Bases: :class:`kivy.graphics.instructions.CanvasBase`"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Canvas:1
# c56171167ab74a27afea4a64721ee269
msgid "The important Canvas class. Use this class to add graphics or context instructions that you want to be used for drawing."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Canvas:6
# b3bfce94caa54edda3f7aa1b3a889a5b
msgid "The Canvas supports Python's ``with`` statement and its enter & exit semantics."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Canvas:9
# 215931363ef54f328c6b962526fa5596
msgid "Usage of a canvas without the ``with`` statement::"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Canvas:14
# 491b12ffaaf64256a96e19958656670d
msgid "Usage of a canvas with Python's ``with`` statement::"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Canvas.after:1
# 606a9532ef5848f5965e6f436ef0b95d
msgid "Property for getting the 'after' group."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Canvas.ask_update:1
# 85821adb88ef4b8b8245ea2932211e5a
msgid "This is useful when you need to trigger a redraw due to some value having changed for example."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Canvas.before:1
# f705ce794f894a0aad6a0aa89a352fd7
msgid "Property for getting the 'before' group."
msgstr ""

#: ../../<autodoc>:1
# 3d27b6cd50b442a69c5e497de8413bfc
msgid "Bases: :class:`kivy.graphics.instructions.Canvas`"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.RenderContext:1
# 2c48b3669d5a447fba9a2277db63b4b4
msgid "The render context stores all the necessary information for drawing, i.e.:"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.RenderContext:3
# 88e4e2e2d6b94f66b2efa3735dc47e9e
msgid "The vertex shader"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.RenderContext:4
# 1deb507e2deb4d18817b803bf97c8bac
msgid "The fragment shader"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.RenderContext:5
# 027a272f80b44a6091b8c31e5430d24d
msgid "The default texture"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.RenderContext:6
# 9411e0caed4346e1b03a39c838d7d847
msgid "The state stack (color, texture, matrix...)"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Callback:3
# da0ce134548f43bb96831442c392d920
msgid "A Callback is an instruction that will be called when the drawing operation is performed. When adding instructions to a canvas, you can do this::"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Callback:12
# 617906f42cb94b8eace78de0768de83c
msgid "The definition of the callback must be::"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Callback:19
# 1f805cb054de411a8c66c69140689c7b
msgid "Note that if you perform many and/or costly calls to callbacks, you might potentially slow down the rendering performance significantly."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Callback:22
# ef810da16b7b427dbf4c16cd3e3f8289
msgid "The drawing of your canvas can not happen until something new happens. From your callback, you can ask for an update::"
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Callback:30
# 1f72f86994e84a208affa12829ded321
msgid "If you use the Callback class to call rendering methods of another toolkit, you will have issues with the OpenGL context. The OpenGL state may have been manipulated by the other toolkit, and as soon as program flow returns to Kivy, it will just break. You can have glitches, crashes, black holes might occur, etc. To avoid that, you can activate the :data:`reset_context` option. It will reset the OpenGL context state to make Kivy's rendering correct, after the call to your callback."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Callback:41
# ae57d47c142c438bbfdc4c42e6a128d8
msgid "The :data:`reset_context` is not a full OpenGL reset. If you have issues regarding that, please contact us."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Callback.ask_update:1
# 164e34acaf0e470c8984fd1f99e2d335
msgid "frame. This is useful when you need to trigger a redraw due to some value having changed for example."
msgstr ""

#: ../../docstring of kivy.graphics.instructions.Callback.reset_context:1
# f4c11ee7d7f64322b79c37f0a6ab33dd
msgid "Set this to True if you want to reset the OpenGL context for Kivy after the callback has been called."
msgstr ""

