# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-17 16:49\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.ext.rst:3
# 70c7e42f00a1429c8006013073385dad
msgid "Extension Support"
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext:2
# 54ea8a013a544ff187e6cf6023a7313c
msgid "Sometimes your application requires functionality that is beyond the scope of what Kivy can deliver. In those cases it is necessary to resort to external software libraries. Given the richness of the Python ecosystem, there is already a great number of software libraries that you can simply import and use right away."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext:8
# 096c36de176147bb9b8c0631c1792ae3
msgid "For some third-party libraries, it's not as easy as that though. Some libraries require special *wrappers* being written for them to be compatible with Kivy. Some libraries might even need to be patched so that they can be used (e.g. if they open their own OpenGL context to draw in and don't support proper offscreen rendering). In those occasions it is often possible to patch the library in question and to provide a Python wrapper around it that is compatible with Kivy. Sticking with this example, you can't just use the wrapper with a 'normal' installation of the library because the patch would be missing."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext:17
# b78c484001ff49f0963b069889de5d0c
msgid "That is where Kivy extensions come in handy. A Kivy extension represents a single third-party library that is provided in a way so that it can simply be downloaded as a single file, put in a special directory and then offers the functionality of the wrapped library to Kivy applications. These extensions will not pollute the global Python environment (as they might be unusable on their own after potential patches have been applied) because they reside in special directories for Kivy that are not accessed by Python by default."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext:26
# 9f234ab4faaa4ec385c099eddf81dbcb
msgid "Kivy extensions are provided as ``*.kex`` files. They are really just zip files, but you must not unzip them yourself. Kivy will do that for you as soon as it's appropriate to do so."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext:32
# 6dff2ca107e849e288a01526710eaf91
msgid "Again, do not try to unzip ``*.kex`` files on your own. While unzipping will work, Kivy will not be able to load the extension and will simply ignore it."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext:35
# a6ccf72740e9488bba989ce5046a0878
msgid "With Kivy's extension system, your application can use specially packaged third-party libraries in a backwards compatible way (by specifying the version that you require) even if the actual third-party library does not guarantee backwards-compatibility. There will be no breakage if newer versions are installed (as a properly suited old version will still be used). For more information about that behaviour, consider the documentation of the :func:`~kivy.ext.load` function."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext:43
# 618b522ac2704e0da90ee37dda9ead54
msgid "If you want to provide an extension on your own, there is a helper script that sets up the initial extension folder structure that Kivy requires for extensions. It can be found at kivy/tools/extensions/make-kivyext.py"
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.load:1
# a0b89a5342c741acbfecae591e0e6eb8
msgid "Use this function to tell Kivy to load a specific version of the given Extension. This is different from kivy's require() in that it will always use the exact same major version you specify, even if a newer (major) version is available. This is because we cannot make the same backwards-compatibility guarantee that we make with Kivy for third-party extensions. You will still get fixes and optimizations that don't break backwards compatibility via minor version upgrades of the extension."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.load:9
# 139e0baf87294bdf91f75396bfcc1725
msgid "The function will then return the loaded module as a Python module object and you can bind it to a name of your choosing. This prevents clashes with modules with the same name that might be installed in a system directory."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.load:13
# 38e7fb90d5864d79aadf7834f6972654
msgid "Usage example for this function::"
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.load:22
# ae9bc112b5c64b31b5905c189aa9fef5
msgid "The exact name of the extension that you want to use."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.load:24
# ecd529dd1b124bdab8f6a882b529ef8e
msgid "A tuple of the form (major, minor), where major and minor are ints that specify the major and minor version number for the extension, e.g. (1, 2) would be akin to 1.2. It is important to note that between minor versions, backwards compatibility is guaranteed, but between major versions it is not. I.e. if you change your extension in a backwards incompatible way, increase the major version number (and reset the minor to 0). If you just do a bug fix or add an optional, backwards-compatible feature, you can just increase the minor version number. If the application then requires version (1, 2), every version starting with that version number will be ok and by default the latest version will be choosen. The two ints major and minor can both be in range(0, infinity)."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.unzip_extensions:1
# 8437682201dc415892f757ef5ba17d6f
msgid "Unzips Kivy extensions. Internal usage only; Don't use it yourself unless you know what you're doing and really want to trigger installation of new extensions."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.unzip_extensions:5
# 6e15447777c24d549f7202d788bb8b88
msgid "For your file to be recognized as an extension, it has to fulfil a few requirements:"
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.unzip_extensions:8
# b758ef5edef54790bc3fd54a97801284
msgid "We require that the file has the ``*.kex`` extension to make the distinction between a Kivy extension and an ordinary zip file clear."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.unzip_extensions:11
# f5e213729d3947a2bff21317106a95a4
msgid "We require that the ``*.kex`` extension files be put into any of the directories listed in EXTENSION_PATHS which is normally ~/.kivy/extensions and extensions/ inside kivy's base dirextory. We do not look for extensions on sys.path or elsewhere in the system."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.unzip_extensions:16
# f1dece8fd1904498bf127b2bc6b2d9c5
msgid "We require that the Kivy extension is zipped in a way so that Python's zipfile module can extract it properly."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.unzip_extensions:19
# 26a36b7b15a24cbcbbcf52d3ff7fbb1b
msgid "We require that the extension internally obeys the common Kivy extension format, which looks like this::"
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.unzip_extensions:26
# fbd6423f935c435ab2768a790b9c6122
msgid "The ``__init__.py`` file is the main entrypoint to the extension. All names that should be usable when the extension is loaded need to be exported (i.e. made available) in the namespace of that file."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.unzip_extensions:30
# 850d3b86387e469e80bc1a104aa3aac6
msgid "How the extension accesses the code of the library that it wraps (be it pure Python or binary code) is up to the extension. For example there could be another Python module adjacent to the ``__init__.py`` file from which the ``__init__.py`` file imports the usable names that it wants to expose."
msgstr ""

#: ../../../kivy/ext/__init__.py:docstring of kivy.ext.unzip_extensions:36
# e6407362a5494076b06986b9f5d14b7e
msgid "We require that the version of the extension be specified in the ``setup.py`` file that is created by the Kivy extension wizard and that the version specification format as explained in :func:`~kivy.ext.load` be used."
msgstr ""

