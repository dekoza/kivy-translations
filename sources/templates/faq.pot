# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-21 16:56\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/faq.rst:4
# f7be326d8f0949538f35db8648b7b967
msgid "FAQ"
msgstr ""

#: ../../sources/faq.rst:6
# 7ec02bc1a25c4d109dffd095e87826ad
msgid "There are a number of questions that repeatedly need to be answered. The following document tries to answer some of them."
msgstr ""

#: ../../sources/faq.rst:12
# d65eda78d5b34632aa43ab4972544fda
msgid "Technical FAQ"
msgstr ""

#: ../../sources/faq.rst:15
# 00fcda1b1f3c47f4bc5f284892feb3f6
msgid "Fatal Python error: (pygame parachute) Segmentation Fault"
msgstr ""

#: ../../sources/faq.rst:17
# 7366b746334c4724b4bc232fbad77cf1
msgid "Most of time, this issue is due to an usage of old graphics driver. Install the latest graphics driver available for your graphics card, and it could be ok."
msgstr ""

#: ../../sources/faq.rst:20
# 0dfda4c8a5504fd5aa002b56af39a270
msgid "If not, please report a detailled issue to github, by following the :ref:`contribute` document, in the section `Reporting an Issue`. This is very important for us because that kind of error can be very hard to debug. Give us all the informations you can give about your environment and execution."
msgstr ""

#: ../../sources/faq.rst:27
# b6724aaa786d428192904395e579b17b
msgid "undefined symbol: glGenerateMipmap"
msgstr ""

#: ../../sources/faq.rst:29
# 1ce367d068bd480aa65396e16587d7d9
msgid "You might have a too old graphics card. Update your graphics drivers to the latest available version, and retry."
msgstr ""

#: ../../sources/faq.rst:33
# adb3100cdafd45f495b320d22faf9335
msgid "ImportError: No module named event"
msgstr ""

#: ../../sources/faq.rst:35
# c5349a58409942d2a9cc603b90700757
msgid "If you use Kivy from our development version, you must compile it before using it. In the kivy directory, do::"
msgstr ""

#: ../../sources/faq.rst:41
# 6a1bcd096c7e410c8a61bb51666662b9
msgid "Pip installation failed"
msgstr ""

#: ../../sources/faq.rst:43
# b0845c8482ae4073a02f45ce7c9db1f8
msgid "Installing Kivy using Pip is not currently supported. Because Pip force the usage of setuptools, setuptools hack build_ext to use pyrex for generating .c, and they are no clean solution to hack against both weird behaviors to use Cython. (Reference: http://mail.scipy.org/pipermail/nipy-devel/2011-March/005709.html)"
msgstr ""

#: ../../sources/faq.rst:48
# e89d6ca1e0bb4bddaa851d5e2e4ea8cf
msgid "Solution: use `easy_install`, as our documentation said."
msgstr ""

#: ../../sources/faq.rst:52
# c65706b0729b443fa5b89b1b1e21495e
msgid "Android FAQ"
msgstr ""

#: ../../sources/faq.rst:55
# 4fcf51c6943b4c71ad28f6ddd27eee77
msgid "could not extract public data"
msgstr ""

#: ../../sources/faq.rst:57
# c4e2ce89547d4b75834d84738ec134c3
msgid "This message error can happen in many cases. Ensure that:"
msgstr ""

#: ../../sources/faq.rst:59
# 29ba3a14f2f04935978f72a6e5caf167
msgid "you have a phone with sdcard"
msgstr ""

#: ../../sources/faq.rst:60
# 4627b3e706e24d40b27d51141585eb8c
msgid "you are not currently in a \"USB Mass Storage\" mode"
msgstr ""

#: ../../sources/faq.rst:61
# 9bc652c33f7b4119b80c01b205e182af
msgid "you have the permissions to write on sdcard"
msgstr ""

#: ../../sources/faq.rst:63
# 99cb96e9ca2146158b14a59c8ab748e8
msgid "In case of USB Mass Storage mode error, and if you don't want to keep unplugging the device, set the usb option to Power."
msgstr ""

#: ../../sources/faq.rst:67
# f96029607126450ba6ea44c3063358c7
msgid "Is it possible to have a kiosk app on android 3.0 ?"
msgstr ""

#: ../../sources/faq.rst:69
# 79bc320e02044ed7abd2253516df3be0
msgid "Thomas Hansen have wrote a detailed answer on kivy-users mailing list:"
msgstr ""

#: ../../sources/faq.rst:71
# a110ef8fdd3e4fa59be8a9e768e71656
msgid "https://groups.google.com/d/msg/kivy-users/QKoCekAR1c0/yV-85Y_iAwoJ"
msgstr ""

#: ../../sources/faq.rst:73
# 0112f1b41bdf40039c6b8da0c410debc
msgid "Basicaly, you need to root de device, remove the SystemUI package, add some line on the xml configuration, and you're done."
msgstr ""

#: ../../sources/faq.rst:78
# 9f4f234a901e4edd9371ef92efb28019
msgid "Project FAQ"
msgstr ""

#: ../../sources/faq.rst:81
# 06e58d172d3145bfb590394001225adf
msgid "Why do you use Python? Isn't it slow?"
msgstr ""

#: ../../sources/faq.rst:83
# 2e0844cd4cdc4850b40489082b675672
msgid "Let us try to give a thorough answer; please bear with us."
msgstr ""

#: ../../sources/faq.rst:85
# c8ba805d0db742b7b6c9620ed94df38f
msgid "Python is a very agile language that allows you to do many things in (by comparison) short time. For many development scenarios, we strongly prefer writing our application quickly in a high-level language such as Python, testing it, then optionally optimizing it."
msgstr ""

#: ../../sources/faq.rst:91
# 1b3c36fcfd0f432a9bedfd4068c5e337
msgid "But what about speed? If you compare execution speeds of implementations for a certain set of algorithms (esp. number crunching) you will find that Python is a lot slower than say, C++. Now you may be even more convinced that it's not a good idea in our case to use Python. Drawing sophisticated graphics (and we are not talking about your grandmother's OpenGL here) is computationally quite expensive and given that we often want to do that for rich user experiences, that would be a fair argument. **But**, in virtually every case your application ends up spending most of the time (by far) executing the same part of the code. For Kivy for example, these parts are event dispatching and graphics drawing. Now Python allows you to do something to make these parts much faster."
msgstr ""

#: ../../sources/faq.rst:106
# 9a7e722c94354031949b440c59595bea
msgid "By using Cython, you can compile your code down to the C level, and from there your usual C compiler optimizes things. This is a pretty pain free process and if you add some hints to your code, the result becomes even faster. We are talking about a speed up in performance by a factor of anything in between 1x and up to more than 1000x (greatly depends on your code). In Kivy, we did this for you and implemented the portions of our code where efficiency really is critical on the C level."
msgstr ""

#: ../../sources/faq.rst:115
# 222982233657491fa09d0fbde17d9108
msgid "For graphics drawing, we also leverage today's GPUs which are, for some tasks such as graphics rasterization, much more efficent than a CPU. Kivy does as much as is reasonable on the GPU to maximize performance. If you use our Canvas API to do the drawing, there is even a compiler that we invented which optimizes your drawing code automatically. If you keep your drawing on the GPU mostly, much of your program's execution speed is not determined by the programming language used, but by the graphics hardware you throw at it."
msgstr ""

#: ../../sources/faq.rst:125
# 8009a75f57da4e2493660ae4e4348bc1
msgid "We believe that these (and other) optimizations that Kivy does for you already make most applications fast enough by far. Often you will even want to limit the speed of the application in order not to waste resources. But even if this is not sufficient, you still have the option of using Cython for your own code to *greatly* speed it up."
msgstr ""

#: ../../sources/faq.rst:132
# b10cd4a6516644a3b0d2e50dcf25a6e1
msgid "Trust us when we say that we have given this very careful thought. We have performed many different benchmarks and came up with quite some clever optimizations to make your application run smoothly."
msgstr ""

#: ../../sources/faq.rst:138
# e4340925342540a798b584783cc9a5f7
msgid "Does Kivy support Python 3.x?"
msgstr ""

#: ../../sources/faq.rst:140
# 001f7855a2484e0da2e210ea73a10b40
msgid "No. Not yet. Python 3 is certainly a good thing; However, it broke backwards compatibility (for good reasons) which means that some considerable portion of available Python projects do not yet work with Python 3. This also applies to some of the projects that Kivy can use as a dependency, which is why we didn't make the switch yet. We would also need to switch our own codebase to Python 3. We didn't do that yet because it's not very high on our priority list, but if somebody doesn't want to wait for us doing it, please go ahead. Please note, though, that Python 2.x is still the de facto standard."
msgstr ""

#: ../../sources/faq.rst:152
# 27bf59de0d434f109e145902877eb15b
msgid "How is Kivy related to PyMT?"
msgstr ""

#: ../../sources/faq.rst:154
# 2226c368ac094731844f173094b51d8d
msgid "Our developers are professionals and are pretty savvy in their area of expertise. However, before Kivy came around there was (and still is) a project named PyMT that was led by our core developers. We learned a great deal from that project during the time that we developed it. In the more than two years of research and development we found many interesting ways on how to improve the design of our framework. We have done numerous benchmarks and as it turns out, to achieve the great speed and flexibility that Kivy has, we had to rewrite quite a big portion of the codebase, making this a backwards-incompatible but future-proof decision. Most notably are the performance increases, which are just incredible. Kivy starts and operates just so much faster, due to heavy optimizations. We also had the opportunity to work with businesses and associations using PyMT. We were able to test our product on a large diversity of setups and made PyMT work on all of these. Writing a system such as Kivy or PyMT is one thing. Making it work under all the different conditions is another. We have a good background here, and brought our knowledge to Kivy."
msgstr ""

#: ../../sources/faq.rst:174
# ba61b8270ce842deb22b669cddabae25
msgid "Furthermore, since some of our core developers decided to stop their full-time jobs and to turn to this project completely, it was decided that a more professional foundation had to be laid. Kivy is that foundation. It is supposed to be a stable and professional product. Technically, Kivy is not really a successor to PyMT because there is no easy migration path between them. However, the goal is the same: Producing high-quality applications for novel user interfaces. This is why we encourage everyone to base new projects on Kivy instead of PyMT. Active development of PyMT has stalled. Maintenance patches are still accepted."
msgstr ""

#: ../../sources/faq.rst:188
# 3c153ce8e07440c18d4d9d15fd062478
msgid "Do you accept patches?"
msgstr ""

#: ../../sources/faq.rst:190
# 345f35aeb7064b4d929a796f59934cb1
msgid "Yes, we love patches. In order to ensure a smooth integration of your precious changes, however, please make sure to read our contribution guidelines. Obviously we don't accept every patch. Your patch has to be coherent with our styleguide and, more importantly, make sense. It does make sense to talk to us before you come up with bigger changes, especially new features."
msgstr ""

#: ../../sources/faq.rst:199
# df132f75801c4ed1b71dd7d1eb50d923
msgid "Does the Kivy project participate in Google's Summer of Code 2011? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---------"
msgstr ""

#: ../../sources/faq.rst:202
# 828c43b5e41e493d97b7f1c78768fe99
msgid "Since Google announced that there will be a GSoC 2011 we have had many potential students ask whether we would participate. The clear answer is: Indeed. :-) The NUIGroup has applied as an umbrella organization and luckily got chosen as one of the mentoring organizations. Given enough slots for NUIGroup, slots will be dedicated to Kivy. That also depends on the overall quality of the student proposals (i.e. if there is only one Kivy student proposal with a bad quality, Kivy will not get a slot). If you want to participate as a student and want to maximize your chances of being accepted, start talking to us today and try fixing some smaller (or larger, if you can ;-) problems to get used to our workflow. If we know you can work well with us, that'd be a big plus."
msgstr ""

#: ../../sources/faq.rst:215
# f7ef87e2d1f249358b41ef251e3c2ab1
msgid "See: http://wiki.nuigroup.com/Google_Summer_of_Code_2011"
msgstr ""

#: ../../sources/faq.rst:217
# 8450df3b84854c958ed0c0034ca6a54b
msgid "Here's a checklist:"
msgstr ""

#: ../../sources/faq.rst:219
# 193d86de765e4e02a5875dbdb9551097
msgid "Make sure to read through the website and at least skim the documentation."
msgstr ""

#: ../../sources/faq.rst:221
# 447764eae265495a88c63a7fb7725b7f
msgid "Look at the source code."
msgstr ""

#: ../../sources/faq.rst:222
# 19ef39fab4b5471eba87a1ba219a1158
msgid "Read our contribution guidelines."
msgstr ""

#: ../../sources/faq.rst:223
# 02c632bc3c0c4ac8968e92df8feaaece
msgid "Pick an idea that you think is interesting from the ideas list (see link above) or come up with your own idea."
msgstr ""

#: ../../sources/faq.rst:225
# 9afe3c416f264c42be0032213fc35372
msgid "Do some research **yourself**. GSoC is not about us teaching you something and you getting paid for that. It is about you trying to achieve agreed upon goals by yourself with our support. The main driving force in this should be, obviously, yourself, though. Many students come up and ask what they should do. Well, we don't know because we know neither your interests nor your skills. Show us you're serious about it and take initiative."
msgstr ""

#: ../../sources/faq.rst:232
# 152494f2c57945f5b091e5fdbb56b05f
msgid "Write a draft proposal about what you want to do. Include what you understand the current state is (very roughly), what you would like to improve and how, etc."
msgstr ""

#: ../../sources/faq.rst:235
# 46682ae62300471fb7fb13964a7bb4fd
msgid "Discuss that proposal with us in a timely manner. Get feedback."
msgstr ""

#: ../../sources/faq.rst:236
# a379707164024af49e6896c932d9bb9f
msgid "Be patient! Especially on IRC. We will try to get to you if we're available. If not, send an email and just wait. Most questions are already answered in the docs or somewhere else and can be found with some research. If your questions don't reflect that you've actually thought through what you're asking, that might not be received well."
msgstr ""

#: ../../sources/faq.rst:242
# 1af313908d7d478d8968e3918cb655f9
msgid "Good luck! :-)"
msgstr ""

