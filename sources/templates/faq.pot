# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-18 21:58\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/faq.rst:4
# bf13e79a6c284a5ab78989a3bca60183
msgid "FAQ"
msgstr ""

#: ../../sources/faq.rst:6
# 5daa2bca806c4d17978eb9552cd6400a
msgid "There are a number of questions that repeatedly need to be answered. The following document tries to answer some of them."
msgstr ""

#: ../../sources/faq.rst:12
# cb2289d35e334f31bb2a23e34c8367cd
msgid "Technical FAQ"
msgstr ""

#: ../../sources/faq.rst:15
# f505c9952f4945a19fac863a21a395d8
msgid "Fatal Python error: (pygame parachute) Segmentation Fault"
msgstr ""

#: ../../sources/faq.rst:17
# 7b9418d996824e769176b86a205fcbdb
msgid "Most of time, this issue is due to an usage of old graphics driver. Install the latest graphics driver available for your graphics card, and it could be ok."
msgstr ""

#: ../../sources/faq.rst:20
# e5755aa66c314f5fbe9003be180f9255
msgid "If not, please report a detailled issue to github, by following the :ref:`contribute` document, in the section `Reporting an Issue`. This is very important for us because that kind of error can be very hard to debug. Give us all the informations you can give about your environment and execution."
msgstr ""

#: ../../sources/faq.rst:27
# 1f64e889454540438435440c7cb1c7d0
msgid "undefined symbol: glGenerateMipmap"
msgstr ""

#: ../../sources/faq.rst:29
# e85fc8eb4b2444e29a7ad94dfa8c0d56
msgid "You might have a too old graphics card. Update your graphics drivers to the latest available version, and retry."
msgstr ""

#: ../../sources/faq.rst:33
# dcfa8bfff72341d5b4bd8553f4110d07
msgid "ImportError: No module named event"
msgstr ""

#: ../../sources/faq.rst:35
# 4ec69244e17f47df8c5a09139bc87420
msgid "If you use Kivy from our development version, you must compile it before using it. In the kivy directory, do::"
msgstr ""

#: ../../sources/faq.rst:41
# 87b1a3e7107c46db957868afa378ce25
msgid "Pip installation failed"
msgstr ""

#: ../../sources/faq.rst:43
# 8ab0a6b18fdc476e9a1199cb4d814901
msgid "Installing Kivy using Pip is not currently supported. Because Pip force the usage of setuptools, setuptools hack build_ext to use pyrex for generating .c, and they are no clean solution to hack against both weird behaviors to use Cython. (Reference: http://mail.scipy.org/pipermail/nipy-devel/2011-March/005709.html)"
msgstr ""

#: ../../sources/faq.rst:48
# 24b75a1b9eb4490c9fde812e1d2c2940
msgid "Solution: use `easy_install`, as our documentation said."
msgstr ""

#: ../../sources/faq.rst:52
# 52ef83ee3afb4efb90ea713028df71d0
msgid "Android FAQ"
msgstr ""

#: ../../sources/faq.rst:55
# dad18fb9eebb4058ae5c30c1b3604394
msgid "could not extract public data"
msgstr ""

#: ../../sources/faq.rst:57
# fdeac8aed8d64e2c89c72c857271254c
msgid "This message error can happen in many cases. Ensure that:"
msgstr ""

#: ../../sources/faq.rst:59
# 391c104028b84f6bbadabdaea26c0749
msgid "you have a phone with sdcard"
msgstr ""

#: ../../sources/faq.rst:60
# b49f3f205e464e698d7926189e63f455
msgid "you are not currently in a \"USB Mass Storage\" mode"
msgstr ""

#: ../../sources/faq.rst:61
# 81faf3ad865846829f92aaa3e7cac41e
msgid "you have the permissions to write on sdcard"
msgstr ""

#: ../../sources/faq.rst:63
# 94cf050644b340849cfd90f9c362943a
msgid "In case of USB Mass Storage mode error, and if you don't want to keep unplugging the device, set the usb option to Power."
msgstr ""

#: ../../sources/faq.rst:67
# 2601cc1f2d324b78ac23f9966e752b3a
msgid "Is it possible to have a kiosk app on android 3.0 ?"
msgstr ""

#: ../../sources/faq.rst:69
# 992f270fcc1e4af6990548d44cef8d50
msgid "Thomas Hansen have wrote a detailed answer on kivy-users mailing list:"
msgstr ""

#: ../../sources/faq.rst:71
# ddb4efd414914017a52bd38acee7c690
msgid "https://groups.google.com/d/msg/kivy-users/QKoCekAR1c0/yV-85Y_iAwoJ"
msgstr ""

#: ../../sources/faq.rst:73
# 566478eb2747474da54111f9f9259947
msgid "Basicaly, you need to root de device, remove the SystemUI package, add some line on the xml configuration, and you're done."
msgstr ""

#: ../../sources/faq.rst:78
# ae5f48dd066b44f19cb3867b6a6402ea
msgid "Project FAQ"
msgstr ""

#: ../../sources/faq.rst:81
# b8f9c164a6b843339a523ed45b490343
msgid "Why do you use Python? Isn't it slow?"
msgstr ""

#: ../../sources/faq.rst:83
# 88cb04c04dbc44a9827e2756bcbb6e67
msgid "Let us try to give a thorough answer; please bear with us."
msgstr ""

#: ../../sources/faq.rst:85
# 7488ed4c6d5341568ebcccdde2df9d56
msgid "Python is a very agile language that allows you to do many things in (by comparison) short time. For many development scenarios, we strongly prefer writing our application quickly in a high-level language such as Python, testing it, then optionally optimizing it."
msgstr ""

#: ../../sources/faq.rst:91
# 27bae0879f7542f2872e5d309f476f10
msgid "But what about speed? If you compare execution speeds of implementations for a certain set of algorithms (esp. number crunching) you will find that Python is a lot slower than say, C++. Now you may be even more convinced that it's not a good idea in our case to use Python. Drawing sophisticated graphics (and we are not talking about your grandmother's OpenGL here) is computationally quite expensive and given that we often want to do that for rich user experiences, that would be a fair argument. **But**, in virtually every case your application ends up spending most of the time (by far) executing the same part of the code. For Kivy for example, these parts are event dispatching and graphics drawing. Now Python allows you to do something to make these parts much faster."
msgstr ""

#: ../../sources/faq.rst:106
# 0c0a7edb74fe49e7920f7bca4d376d2a
msgid "By using Cython, you can compile your code down to the C level, and from there your usual C compiler optimizes things. This is a pretty pain free process and if you add some hints to your code, the result becomes even faster. We are talking about a speed up in performance by a factor of anything in between 1x and up to more than 1000x (greatly depends on your code). In Kivy, we did this for you and implemented the portions of our code where efficiency really is critical on the C level."
msgstr ""

#: ../../sources/faq.rst:115
# 5ff1dfc513e841bfb85f280f21279e84
msgid "For graphics drawing, we also leverage today's GPUs which are, for some tasks such as graphics rasterization, much more efficent than a CPU. Kivy does as much as is reasonable on the GPU to maximize performance. If you use our Canvas API to do the drawing, there is even a compiler that we invented which optimizes your drawing code automatically. If you keep your drawing on the GPU mostly, much of your program's execution speed is not determined by the programming language used, but by the graphics hardware you throw at it."
msgstr ""

#: ../../sources/faq.rst:125
# c4a88538dcc74fb5a025e4e15577ffdd
msgid "We believe that these (and other) optimizations that Kivy does for you already make most applications fast enough by far. Often you will even want to limit the speed of the application in order not to waste resources. But even if this is not sufficient, you still have the option of using Cython for your own code to *greatly* speed it up."
msgstr ""

#: ../../sources/faq.rst:132
# 05416471bf2348519d4343026fc701c3
msgid "Trust us when we say that we have given this very careful thought. We have performed many different benchmarks and came up with quite some clever optimizations to make your application run smoothly."
msgstr ""

#: ../../sources/faq.rst:138
# 20c6d09d7f7b426dad009574c9965eec
msgid "Does Kivy support Python 3.x?"
msgstr ""

#: ../../sources/faq.rst:140
# 068e77424abf4623a360889b22a575b3
msgid "No. Not yet. Python 3 is certainly a good thing; However, it broke backwards compatibility (for good reasons) which means that some considerable portion of available Python projects do not yet work with Python 3. This also applies to some of the projects that Kivy can use as a dependency, which is why we didn't make the switch yet. We would also need to switch our own codebase to Python 3. We didn't do that yet because it's not very high on our priority list, but if somebody doesn't want to wait for us doing it, please go ahead. Please note, though, that Python 2.x is still the de facto standard."
msgstr ""

#: ../../sources/faq.rst:152
# fc649fa1f02e42c09fcf9bfd9b508dbf
msgid "How is Kivy related to PyMT?"
msgstr ""

#: ../../sources/faq.rst:154
# bd644d3fe97d49eba7e36cba2c53e1ab
msgid "Our developers are professionals and are pretty savvy in their area of expertise. However, before Kivy came around there was (and still is) a project named PyMT that was led by our core developers. We learned a great deal from that project during the time that we developed it. In the more than two years of research and development we found many interesting ways on how to improve the design of our framework. We have done numerous benchmarks and as it turns out, to achieve the great speed and flexibility that Kivy has, we had to rewrite quite a big portion of the codebase, making this a backwards-incompatible but future-proof decision. Most notably are the performance increases, which are just incredible. Kivy starts and operates just so much faster, due to heavy optimizations. We also had the opportunity to work with businesses and associations using PyMT. We were able to test our product on a large diversity of setups and made PyMT work on all of these. Writing a system such as Kivy or PyMT is one thing. Making it work under all the different conditions is another. We have a good background here, and brought our knowledge to Kivy."
msgstr ""

#: ../../sources/faq.rst:174
# 8c18ad43c2384993802186d8a3552644
msgid "Furthermore, since some of our core developers decided to stop their full-time jobs and to turn to this project completely, it was decided that a more professional foundation had to be laid. Kivy is that foundation. It is supposed to be a stable and professional product. Technically, Kivy is not really a successor to PyMT because there is no easy migration path between them. However, the goal is the same: Producing high-quality applications for novel user interfaces. This is why we encourage everyone to base new projects on Kivy instead of PyMT. Active development of PyMT has stalled. Maintenance patches are still accepted."
msgstr ""

#: ../../sources/faq.rst:188
# 3bd1879e2ebe4bd6a5b9db8175f2b911
msgid "Do you accept patches?"
msgstr ""

#: ../../sources/faq.rst:190
# e3766f0e69e54873bd31f2f9c220709e
msgid "Yes, we love patches. In order to ensure a smooth integration of your precious changes, however, please make sure to read our contribution guidelines. Obviously we don't accept every patch. Your patch has to be coherent with our styleguide and, more importantly, make sense. It does make sense to talk to us before you come up with bigger changes, especially new features."
msgstr ""

#: ../../sources/faq.rst:199
# 021e4ba6663d40ecaf65f8cd5062ba56
msgid "Does the Kivy project participate in Google's Summer of Code 2011? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---------"
msgstr ""

#: ../../sources/faq.rst:202
# 8f350bb9f805412da8425307a1148da3
msgid "Since Google announced that there will be a GSoC 2011 we have had many potential students ask whether we would participate. The clear answer is: Indeed. :-) The NUIGroup has applied as an umbrella organization and luckily got chosen as one of the mentoring organizations. Given enough slots for NUIGroup, slots will be dedicated to Kivy. That also depends on the overall quality of the student proposals (i.e. if there is only one Kivy student proposal with a bad quality, Kivy will not get a slot). If you want to participate as a student and want to maximize your chances of being accepted, start talking to us today and try fixing some smaller (or larger, if you can ;-) problems to get used to our workflow. If we know you can work well with us, that'd be a big plus."
msgstr ""

#: ../../sources/faq.rst:215
# 16b51ac18a5d4c97b2ef6d63aecce741
msgid "See: http://wiki.nuigroup.com/Google_Summer_of_Code_2011"
msgstr ""

#: ../../sources/faq.rst:217
# 06f9cd0c5ce542b7a26099ca278f38ad
msgid "Here's a checklist:"
msgstr ""

#: ../../sources/faq.rst:219
# 18240542ea104f72928b45cbb1968eb4
msgid "Make sure to read through the website and at least skim the documentation."
msgstr ""

#: ../../sources/faq.rst:221
# f0d603ea949c46f290c32e027ca2eca0
msgid "Look at the source code."
msgstr ""

#: ../../sources/faq.rst:222
# 322f58eda2fd404e90fcaf0a573aa61b
msgid "Read our contribution guidelines."
msgstr ""

#: ../../sources/faq.rst:223
# edfaa69d68e74f06a13a6cf276f7179b
msgid "Pick an idea that you think is interesting from the ideas list (see link above) or come up with your own idea."
msgstr ""

#: ../../sources/faq.rst:225
# cc2f6400635e4fdab734078e5490b06e
msgid "Do some research **yourself**. GSoC is not about us teaching you something and you getting paid for that. It is about you trying to achieve agreed upon goals by yourself with our support. The main driving force in this should be, obviously, yourself, though. Many students come up and ask what they should do. Well, we don't know because we know neither your interests nor your skills. Show us you're serious about it and take initiative."
msgstr ""

#: ../../sources/faq.rst:232
# 8f86a0d5c1934a6ebf66c662c545e9b8
msgid "Write a draft proposal about what you want to do. Include what you understand the current state is (very roughly), what you would like to improve and how, etc."
msgstr ""

#: ../../sources/faq.rst:235
# bc84e94c22804ce2a8f15b218b7d4482
msgid "Discuss that proposal with us in a timely manner. Get feedback."
msgstr ""

#: ../../sources/faq.rst:236
# 49b6bd64d0ca4c0d947b1b6186e24433
msgid "Be patient! Especially on IRC. We will try to get to you if we're available. If not, send an email and just wait. Most questions are already answered in the docs or somewhere else and can be found with some research. If your questions don't reflect that you've actually thought through what you're asking, that might not be received well."
msgstr ""

#: ../../sources/faq.rst:242
# 542b826899cd47838c752455c08a926b
msgid "Good luck! :-)"
msgstr ""

