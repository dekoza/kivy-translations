# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-14 16:32\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/faq.rst:4
# affc1fdcb7a147c6ba26a42a9450237f
msgid "Frequently Asked Questions"
msgstr ""

#: ../../sources/faq.rst:6
# a5a0400bbb99494fb7fe2009cc4d4fae
msgid "There are a number of questions that repeatedly need to be answered. The following document tries to answer some of them."
msgstr ""

#: ../../sources/faq.rst:12
# fb2a205c833a47798f4c7cfa2d2324e3
msgid "Technical FAQ"
msgstr ""

#: ../../sources/faq.rst:15
# 0f05c37aa68f4b968ae0e6d1af0069a3
msgid "Fatal Python error: (pygame parachute) Segmentation Fault"
msgstr ""

#: ../../sources/faq.rst:17
# d3a12df91208432e927de82e6e28096b
msgid "Most of time, this issue is due to an usage of old graphics driver. Install the latest graphics driver available for your graphics card, and it could be ok."
msgstr ""

#: ../../sources/faq.rst:20
# d04870a6bd104458b6d73c0dfe48e1fc
msgid "If not, please report a detailled issue to github, by following the :ref:`contribute` document, in the section `Reporting an Issue`. This is very important for us because that kind of error can be very hard to debug. Give us all the informations you can give about your environment and execution."
msgstr ""

#: ../../sources/faq.rst:27
# a232d07ec63241f89c8eee1d4d320d2d
msgid "undefined symbol: glGenerateMipmap"
msgstr ""

#: ../../sources/faq.rst:29
# 58e325ebc9f44b02aae8b96cc85b84e5
msgid "You might have a too old graphics card. Update your graphics drivers to the latest available version, and retry."
msgstr ""

#: ../../sources/faq.rst:33
# 61e34e5ff722483fb26d91028795f822
msgid "ImportError: No module named event"
msgstr ""

#: ../../sources/faq.rst:35
# 79b1b29ce2c242d2b59baf61d32e5c5e
msgid "If you use Kivy from our development version, you must compile it before using it. In the kivy directory, do::"
msgstr ""

#: ../../sources/faq.rst:41
# c187b28767c4434fb79190f74044deec
msgid "Pip installation failed"
msgstr ""

#: ../../sources/faq.rst:43
# 4c2cfcab0c46427abaaa2aee692a4925
msgid "Installing Kivy using Pip is not currently supported. Because Pip force the usage of setuptools, setuptools hack build_ext to use pyrex for generating .c, and they are no clean solution to hack against both weird behaviors to use Cython. (Reference: http://mail.scipy.org/pipermail/nipy-devel/2011-March/005709.html)"
msgstr ""

#: ../../sources/faq.rst:48
# fd0a6e62a2bf462dbce316b7edc3b086
msgid "Solution: use `easy_install`, as our documentation said."
msgstr ""

#: ../../sources/faq.rst:52
# f0a442a221be44f98478308eddad0c3e
msgid "Android FAQ"
msgstr ""

#: ../../sources/faq.rst:55
# 21fbfe91f6c449afbd7b6089f9cf7cec
msgid "could not extract public data"
msgstr ""

#: ../../sources/faq.rst:57
# d1f223bd49884401973c2d97e3d8779b
msgid "This message error can happen in many cases. Ensure that:"
msgstr ""

#: ../../sources/faq.rst:59
# 3ae210ea78614c33b62b2c9022f0574d
msgid "you have a phone with sdcard"
msgstr ""

#: ../../sources/faq.rst:60
# 6a8ab237851740cba5349599de55d7eb
msgid "you are not currently in a \"USB Mass Storage\" mode"
msgstr ""

#: ../../sources/faq.rst:61
# 90764ee48463440cbed15d83b6c5102c
msgid "you have the permissions to write on sdcard"
msgstr ""

#: ../../sources/faq.rst:63
# 7c6c17312cf548f9b3c257508682beca
msgid "In case of USB Mass Storage mode error, and if you don't want to keep unplugging the device, set the usb option to Power."
msgstr ""

#: ../../sources/faq.rst:67
# a3285c1e4fc9410ca10174711e202b5d
msgid "Is it possible to have a kiosk app on android 3.0 ?"
msgstr ""

#: ../../sources/faq.rst:69
# 11d1d148c25f49489cd6215089f2ef73
msgid "Thomas Hansen have wrote a detailed answer on kivy-users mailing list:"
msgstr ""

#: ../../sources/faq.rst:71
# ecd4a1c0454c423c984cf82179825c32
msgid "https://groups.google.com/d/msg/kivy-users/QKoCekAR1c0/yV-85Y_iAwoJ"
msgstr ""

#: ../../sources/faq.rst:73
# e9690762011f4cf8ab20aee48fca9036
msgid "Basicaly, you need to root de device, remove the SystemUI package, add some line on the xml configuration, and you're done."
msgstr ""

#: ../../sources/faq.rst:78
# 6c5b2eb6ff704f99850bd742b3865c88
msgid "Project FAQ"
msgstr ""

#: ../../sources/faq.rst:81
# 5425b472f112495889a8fe1f118c03c6
msgid "Why do you use Python? Isn't it slow?"
msgstr ""

#: ../../sources/faq.rst:83
# c053fe66551642e4aa21d41dba1f8488
msgid "Let us try to give a thorough answer; please bear with us."
msgstr ""

#: ../../sources/faq.rst:85
# 2d2b01ec9cfd46e0ab8d0b5e3c10ad80
msgid "Python is a very agile language that allows you to do many things in (by comparison) short time. For many development scenarios, we strongly prefer writing our application quickly in a high-level language such as Python, testing it, then optionally optimizing it."
msgstr ""

#: ../../sources/faq.rst:91
# bd6d4afb8e174e8a811e1be69840f0e9
msgid "But what about speed? If you compare execution speeds of implementations for a certain set of algorithms (esp. number crunching) you will find that Python is a lot slower than say, C++. Now you may be even more convinced that it's not a good idea in our case to use Python. Drawing sophisticated graphics (and we are not talking about your grandmother's OpenGL here) is computationally quite expensive and given that we often want to do that for rich user experiences, that would be a fair argument. **But**, in virtually every case your application ends up spending most of the time (by far) executing the same part of the code. For Kivy for example, these parts are event dispatching and graphics drawing. Now Python allows you to do something to make these parts much faster."
msgstr ""

#: ../../sources/faq.rst:106
# 7b64289041264fb9b4104f465746e542
msgid "By using Cython, you can compile your code down to the C level, and from there your usual C compiler optimizes things. This is a pretty pain free process and if you add some hints to your code, the result becomes even faster. We are talking about a speed up in performance by a factor of anything in between 1x and up to more than 1000x (greatly depends on your code). In Kivy, we did this for you and implemented the portions of our code where efficiency really is critical on the C level."
msgstr ""

#: ../../sources/faq.rst:115
# 48ec0b9791cd4d5eac7d1344e541c265
msgid "For graphics drawing, we also leverage today's GPUs which are, for some tasks such as graphics rasterization, much more efficent than a CPU. Kivy does as much as is reasonable on the GPU to maximize performance. If you use our Canvas API to do the drawing, there is even a compiler that we invented which optimizes your drawing code automatically. If you keep your drawing on the GPU mostly, much of your program's execution speed is not determined by the programming language used, but by the graphics hardware you throw at it."
msgstr ""

#: ../../sources/faq.rst:125
# 924b7aed18b647b3a02a93b4a9e70143
msgid "We believe that these (and other) optimizations that Kivy does for you already make most applications fast enough by far. Often you will even want to limit the speed of the application in order not to waste resources. But even if this is not sufficient, you still have the option of using Cython for your own code to *greatly* speed it up."
msgstr ""

#: ../../sources/faq.rst:132
# 79fad84a127743a9bc3d000fdaf6f3a5
msgid "Trust us when we say that we have given this very careful thought. We have performed many different benchmarks and came up with quite some clever optimizations to make your application run smoothly."
msgstr ""

#: ../../sources/faq.rst:138
# 0e70a69a37eb475fae48f049c27ca398
msgid "Does Kivy support Python 3.x?"
msgstr ""

#: ../../sources/faq.rst:140
# 6ad9908bd55d45138afb6c82d45f05aa
msgid "No. Not yet. Python 3 is certainly a good thing; However, it broke backwards compatibility (for good reasons) which means that some considerable portion of available Python projects do not yet work with Python 3. This also applies to some of the projects that Kivy can use as a dependency, which is why we didn't make the switch yet. We would also need to switch our own codebase to Python 3. We didn't do that yet because it's not very high on our priority list, but if somebody doesn't want to wait for us doing it, please go ahead. Please note, though, that Python 2.x is still the de facto standard."
msgstr ""

#: ../../sources/faq.rst:152
# 954fa789760a4625ab7f16d42f21ec96
msgid "How is Kivy related to PyMT?"
msgstr ""

#: ../../sources/faq.rst:154
# 8b9d73dad98e443388fc11bdb55b6759
msgid "Our developers are professionals and are pretty savvy in their area of expertise. However, before Kivy came around there was (and still is) a project named PyMT that was led by our core developers. We learned a great deal from that project during the time that we developed it. In the more than two years of research and development we found many interesting ways on how to improve the design of our framework. We have done numerous benchmarks and as it turns out, to achieve the great speed and flexibility that Kivy has, we had to rewrite quite a big portion of the codebase, making this a backwards-incompatible but future-proof decision. Most notably are the performance increases, which are just incredible. Kivy starts and operates just so much faster, due to heavy optimizations. We also had the opportunity to work with businesses and associations using PyMT. We were able to test our product on a large diversity of setups and made PyMT work on all of these. Writing a system such as Kivy or PyMT is one thing. Making it work under all the different conditions is another. We have a good background here, and brought our knowledge to Kivy."
msgstr ""

#: ../../sources/faq.rst:174
# 550eef17c5e648f8b157931ccb1993da
msgid "Furthermore, since some of our core developers decided to stop their full-time jobs and to turn to this project completely, it was decided that a more professional foundation had to be laid. Kivy is that foundation. It is supposed to be a stable and professional product. Technically, Kivy is not really a successor to PyMT because there is no easy migration path between them. However, the goal is the same: Producing high-quality applications for novel user interfaces. This is why we encourage everyone to base new projects on Kivy instead of PyMT. Active development of PyMT has stalled. Maintenance patches are still accepted."
msgstr ""

#: ../../sources/faq.rst:188
# f5ee11517545466082ecee7fc1ae0303
msgid "Do you accept patches?"
msgstr ""

#: ../../sources/faq.rst:190
# e1ee51aaf4ff4006b79c126ced30af42
msgid "Yes, we love patches. In order to ensure a smooth integration of your precious changes, however, please make sure to read our contribution guidelines. Obviously we don't accept every patch. Your patch has to be coherent with our styleguide and, more importantly, make sense. It does make sense to talk to us before you come up with bigger changes, especially new features."
msgstr ""

#: ../../sources/faq.rst:200
# 1d27f26c019a415c8b656ac444041c74
msgid "Does the Kivy project participate in Google's Summer of Code 2011?"
msgstr ""

#: ../../sources/faq.rst:202
# 3955c2cc6d3f4747bfbe0d52f4c06175
msgid "Since Google announced that there will be a GSoC 2011 we have had many potential students ask whether we would participate. The clear answer is: Indeed. :-) The NUIGroup has applied as an umbrella organization and luckily got chosen as one of the mentoring organizations. Given enough slots for NUIGroup, slots will be dedicated to Kivy. That also depends on the overall quality of the student proposals (i.e. if there is only one Kivy student proposal with a bad quality, Kivy will not get a slot). If you want to participate as a student and want to maximize your chances of being accepted, start talking to us today and try fixing some smaller (or larger, if you can ;-) problems to get used to our workflow. If we know you can work well with us, that'd be a big plus."
msgstr ""

#: ../../sources/faq.rst:215
# fe33602378154942ad0d1e1ce7204118
msgid "See: http://wiki.nuigroup.com/Google_Summer_of_Code_2011"
msgstr ""

#: ../../sources/faq.rst:217
# e95f582f65b846268cc4a1d82d86368a
msgid "Here's a checklist:"
msgstr ""

#: ../../sources/faq.rst:219
# db78a937f08e41ffb443be201d6f1092
msgid "Make sure to read through the website and at least skim the documentation."
msgstr ""

#: ../../sources/faq.rst:221
# cbdce0dfe02b4a08b1ab9a9321254aec
msgid "Look at the source code."
msgstr ""

#: ../../sources/faq.rst:222
# 0784fae05f98420db8c65791332e0571
msgid "Read our contribution guidelines."
msgstr ""

#: ../../sources/faq.rst:223
# d7c247d0a2ad405da19467f7f2789887
msgid "Pick an idea that you think is interesting from the ideas list (see link above) or come up with your own idea."
msgstr ""

#: ../../sources/faq.rst:225
# b266c38c90284be6bfd6d2efa35df4ec
msgid "Do some research **yourself**. GSoC is not about us teaching you something and you getting paid for that. It is about you trying to achieve agreed upon goals by yourself with our support. The main driving force in this should be, obviously, yourself, though. Many students come up and ask what they should do. Well, we don't know because we know neither your interests nor your skills. Show us you're serious about it and take initiative."
msgstr ""

#: ../../sources/faq.rst:232
# b71c18d80eb848448a8cfbefed346d26
msgid "Write a draft proposal about what you want to do. Include what you understand the current state is (very roughly), what you would like to improve and how, etc."
msgstr ""

#: ../../sources/faq.rst:235
# af378d3e424f444eb65c3d6df2368f55
msgid "Discuss that proposal with us in a timely manner. Get feedback."
msgstr ""

#: ../../sources/faq.rst:236
# 7ef9f9521e064221abaaeb29944fc1f3
msgid "Be patient! Especially on IRC. We will try to get to you if we're available. If not, send an email and just wait. Most questions are already answered in the docs or somewhere else and can be found with some research. If your questions don't reflect that you've actually thought through what you're asking, that might not be received well."
msgstr ""

#: ../../sources/faq.rst:242
# 950e816fafd8465388e0197bcca40261
msgid "Good luck! :-)"
msgstr ""

