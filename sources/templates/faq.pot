# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-17 22:29\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/faq.rst:4
# cb270537a8d54fcb91d0147dd9f5cd18
msgid "FAQ"
msgstr ""

#: ../../sources/faq.rst:6
# 531d6674d9674ef192cd3b0e7b433e94
msgid "There are a number of questions that repeatedly need to be answered. The following document tries to answer some of them."
msgstr ""

#: ../../sources/faq.rst:12
# 3e0b67bfec94434e88af1fd6e418f0c7
msgid "Technical FAQ"
msgstr ""

#: ../../sources/faq.rst:15
# d26fb9e1abf9412fb61b64ef79128e72
msgid "Fatal Python error: (pygame parachute) Segmentation Fault"
msgstr ""

#: ../../sources/faq.rst:17
# a99c48e84d184ffcbfbf466707790fac
msgid "Most of time, this issue is due to an usage of old graphics driver. Install the latest graphics driver available for your graphics card, and it could be ok."
msgstr ""

#: ../../sources/faq.rst:20
# 4267e5f55d6a4aec83badff85a21b18b
msgid "If not, please report a detailled issue to github, by following the :ref:`contribute` document, in the section `Reporting an Issue`. This is very important for us because that kind of error can be very hard to debug. Give us all the informations you can give about your environment and execution."
msgstr ""

#: ../../sources/faq.rst:27
# 1c9fc185fc62458a8c127e27093ecd97
msgid "undefined symbol: glGenerateMipmap"
msgstr ""

#: ../../sources/faq.rst:29
# f877b994b4b54142bc16100ce492c66b
msgid "You might have a too old graphics card. Update your graphics drivers to the latest available version, and retry."
msgstr ""

#: ../../sources/faq.rst:33
# 42dc2226d91a4420aeededce64448739
msgid "ImportError: No module named event"
msgstr ""

#: ../../sources/faq.rst:35
# 63186a9c4b5742f9835f359928791038
msgid "If you use Kivy from our development version, you must compile it before using it. In the kivy directory, do::"
msgstr ""

#: ../../sources/faq.rst:41
# cd559c3d703448d295d653be54e1f78d
msgid "Pip installation failed"
msgstr ""

#: ../../sources/faq.rst:43
# bb50a566904c4d4aad1ec30ef230fba2
msgid "Installing Kivy using Pip is not currently supported. Because Pip force the usage of setuptools, setuptools hack build_ext to use pyrex for generating .c, and they are no clean solution to hack against both weird behaviors to use Cython. (Reference: http://mail.scipy.org/pipermail/nipy-devel/2011-March/005709.html)"
msgstr ""

#: ../../sources/faq.rst:48
# d930febbb75742079937116a257b73ce
msgid "Solution: use `easy_install`, as our documentation said."
msgstr ""

#: ../../sources/faq.rst:52
# ec19e35228fd4e66a3bde4ff6302be94
msgid "Android FAQ"
msgstr ""

#: ../../sources/faq.rst:55
# f8d92e3531624d62b58ca06e40f5ba92
msgid "could not extract public data"
msgstr ""

#: ../../sources/faq.rst:57
# 0a9d79a97a4642adb6937c4f68a25838
msgid "This message error can happen in many cases. Ensure that:"
msgstr ""

#: ../../sources/faq.rst:59
# edabca457cd54f2aba683249c7dbe4a2
msgid "you have a phone with sdcard"
msgstr ""

#: ../../sources/faq.rst:60
# f04846c2f5914082b6bf43d92d1dd10f
msgid "you are not currently in a \"USB Mass Storage\" mode"
msgstr ""

#: ../../sources/faq.rst:61
# 4a3c83a4d7b64d0892d5d40d26b9df43
msgid "you have the permissions to write on sdcard"
msgstr ""

#: ../../sources/faq.rst:63
# 18310cb0fe564ce6bec332cbd12b3cde
msgid "In case of USB Mass Storage mode error, and if you don't want to keep unplugging the device, set the usb option to Power."
msgstr ""

#: ../../sources/faq.rst:67
# d039ed7e197848cdbc63e564755fe340
msgid "Is it possible to have a kiosk app on android 3.0 ?"
msgstr ""

#: ../../sources/faq.rst:69
# 57c1558d08784f3ebbb09e5413a6f36b
msgid "Thomas Hansen have wrote a detailed answer on kivy-users mailing list:"
msgstr ""

#: ../../sources/faq.rst:71
# 405ceaa115b14fbfa87e8a0dc89784e9
msgid "https://groups.google.com/d/msg/kivy-users/QKoCekAR1c0/yV-85Y_iAwoJ"
msgstr ""

#: ../../sources/faq.rst:73
# 01dd59b74264438ea6a2aaf527d4441a
msgid "Basicaly, you need to root de device, remove the SystemUI package, add some line on the xml configuration, and you're done."
msgstr ""

#: ../../sources/faq.rst:78
# 0175ff16db3f4c1c8e7a2bd63862529d
msgid "Project FAQ"
msgstr ""

#: ../../sources/faq.rst:81
# 848a446b8cdf4a45beeea3ca9fb58caa
msgid "Why do you use Python? Isn't it slow?"
msgstr ""

#: ../../sources/faq.rst:83
# 6a74e722993e4181a168a10e87f60364
msgid "Let us try to give a thorough answer; please bear with us."
msgstr ""

#: ../../sources/faq.rst:85
# 5ea1f640842c438aaa1618abb1c044ee
msgid "Python is a very agile language that allows you to do many things in (by comparison) short time. For many development scenarios, we strongly prefer writing our application quickly in a high-level language such as Python, testing it, then optionally optimizing it."
msgstr ""

#: ../../sources/faq.rst:91
# f8232d11618c4e9fac01a48b41717b7e
msgid "But what about speed? If you compare execution speeds of implementations for a certain set of algorithms (esp. number crunching) you will find that Python is a lot slower than say, C++. Now you may be even more convinced that it's not a good idea in our case to use Python. Drawing sophisticated graphics (and we are not talking about your grandmother's OpenGL here) is computationally quite expensive and given that we often want to do that for rich user experiences, that would be a fair argument. **But**, in virtually every case your application ends up spending most of the time (by far) executing the same part of the code. For Kivy for example, these parts are event dispatching and graphics drawing. Now Python allows you to do something to make these parts much faster."
msgstr ""

#: ../../sources/faq.rst:106
# 36009e8f6b6f4ca08e451ace7e74e3e6
msgid "By using Cython, you can compile your code down to the C level, and from there your usual C compiler optimizes things. This is a pretty pain free process and if you add some hints to your code, the result becomes even faster. We are talking about a speed up in performance by a factor of anything in between 1x and up to more than 1000x (greatly depends on your code). In Kivy, we did this for you and implemented the portions of our code where efficiency really is critical on the C level."
msgstr ""

#: ../../sources/faq.rst:115
# 2312439a1c2c49cab336c83acc72ce98
msgid "For graphics drawing, we also leverage today's GPUs which are, for some tasks such as graphics rasterization, much more efficent than a CPU. Kivy does as much as is reasonable on the GPU to maximize performance. If you use our Canvas API to do the drawing, there is even a compiler that we invented which optimizes your drawing code automatically. If you keep your drawing on the GPU mostly, much of your program's execution speed is not determined by the programming language used, but by the graphics hardware you throw at it."
msgstr ""

#: ../../sources/faq.rst:125
# 58b7f7d295704ae186306d5648a02044
msgid "We believe that these (and other) optimizations that Kivy does for you already make most applications fast enough by far. Often you will even want to limit the speed of the application in order not to waste resources. But even if this is not sufficient, you still have the option of using Cython for your own code to *greatly* speed it up."
msgstr ""

#: ../../sources/faq.rst:132
# cfe40e43300f443aaa53846438934ce5
msgid "Trust us when we say that we have given this very careful thought. We have performed many different benchmarks and came up with quite some clever optimizations to make your application run smoothly."
msgstr ""

#: ../../sources/faq.rst:138
# 8a9630a65912491cb9d930a3fa78c760
msgid "Does Kivy support Python 3.x?"
msgstr ""

#: ../../sources/faq.rst:140
# 95ed3060247d4b29b67cec44ad5a80ad
msgid "No. Not yet. Python 3 is certainly a good thing; However, it broke backwards compatibility (for good reasons) which means that some considerable portion of available Python projects do not yet work with Python 3. This also applies to some of the projects that Kivy can use as a dependency, which is why we didn't make the switch yet. We would also need to switch our own codebase to Python 3. We didn't do that yet because it's not very high on our priority list, but if somebody doesn't want to wait for us doing it, please go ahead. Please note, though, that Python 2.x is still the de facto standard."
msgstr ""

#: ../../sources/faq.rst:152
# fb25afb90e79424895d21749b62c8a46
msgid "How is Kivy related to PyMT?"
msgstr ""

#: ../../sources/faq.rst:154
# 3b4f65ba6ec94356ad798c780f78ec36
msgid "Our developers are professionals and are pretty savvy in their area of expertise. However, before Kivy came around there was (and still is) a project named PyMT that was led by our core developers. We learned a great deal from that project during the time that we developed it. In the more than two years of research and development we found many interesting ways on how to improve the design of our framework. We have done numerous benchmarks and as it turns out, to achieve the great speed and flexibility that Kivy has, we had to rewrite quite a big portion of the codebase, making this a backwards-incompatible but future-proof decision. Most notably are the performance increases, which are just incredible. Kivy starts and operates just so much faster, due to heavy optimizations. We also had the opportunity to work with businesses and associations using PyMT. We were able to test our product on a large diversity of setups and made PyMT work on all of these. Writing a system such as Kivy or PyMT is one thing. Making it work under all the different conditions is another. We have a good background here, and brought our knowledge to Kivy."
msgstr ""

#: ../../sources/faq.rst:174
# fe077de1eabe4d8c9e710dce3e3f8621
msgid "Furthermore, since some of our core developers decided to stop their full-time jobs and to turn to this project completely, it was decided that a more professional foundation had to be laid. Kivy is that foundation. It is supposed to be a stable and professional product. Technically, Kivy is not really a successor to PyMT because there is no easy migration path between them. However, the goal is the same: Producing high-quality applications for novel user interfaces. This is why we encourage everyone to base new projects on Kivy instead of PyMT. Active development of PyMT has stalled. Maintenance patches are still accepted."
msgstr ""

#: ../../sources/faq.rst:188
# 3cc9e27e3acd415e98e6e04b3b9d450a
msgid "Do you accept patches?"
msgstr ""

#: ../../sources/faq.rst:190
# 7d2bea650a6e48649b7c89d3aeb76384
msgid "Yes, we love patches. In order to ensure a smooth integration of your precious changes, however, please make sure to read our contribution guidelines. Obviously we don't accept every patch. Your patch has to be coherent with our styleguide and, more importantly, make sense. It does make sense to talk to us before you come up with bigger changes, especially new features."
msgstr ""

#: ../../sources/faq.rst:199
# fc5c283cf00b476388dbc3cfc2ce78c0
msgid "Does the Kivy project participate in Google's Summer of Code 2011? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---------"
msgstr ""

#: ../../sources/faq.rst:202
# 503bffe5dda44a4aa5d3086d6af04576
msgid "Since Google announced that there will be a GSoC 2011 we have had many potential students ask whether we would participate. The clear answer is: Indeed. :-) The NUIGroup has applied as an umbrella organization and luckily got chosen as one of the mentoring organizations. Given enough slots for NUIGroup, slots will be dedicated to Kivy. That also depends on the overall quality of the student proposals (i.e. if there is only one Kivy student proposal with a bad quality, Kivy will not get a slot). If you want to participate as a student and want to maximize your chances of being accepted, start talking to us today and try fixing some smaller (or larger, if you can ;-) problems to get used to our workflow. If we know you can work well with us, that'd be a big plus."
msgstr ""

#: ../../sources/faq.rst:215
# ad247441b2a64e96b2815f085ecb6144
msgid "See: http://wiki.nuigroup.com/Google_Summer_of_Code_2011"
msgstr ""

#: ../../sources/faq.rst:217
# c0f8f325f5714bdabd860a3425533a83
msgid "Here's a checklist:"
msgstr ""

#: ../../sources/faq.rst:219
# 56a247d578da4643aa1e6a34fdce08fc
msgid "Make sure to read through the website and at least skim the documentation."
msgstr ""

#: ../../sources/faq.rst:221
# 5576d7ea121640d492a734b8d35a78af
msgid "Look at the source code."
msgstr ""

#: ../../sources/faq.rst:222
# 0fa0d6715e094a73b6395f4aea0ba960
msgid "Read our contribution guidelines."
msgstr ""

#: ../../sources/faq.rst:223
# 2b17edd8b15249f4b36c823cb19d2893
msgid "Pick an idea that you think is interesting from the ideas list (see link above) or come up with your own idea."
msgstr ""

#: ../../sources/faq.rst:225
# e9867cdd25224673b7dc29d5be5196cb
msgid "Do some research **yourself**. GSoC is not about us teaching you something and you getting paid for that. It is about you trying to achieve agreed upon goals by yourself with our support. The main driving force in this should be, obviously, yourself, though. Many students come up and ask what they should do. Well, we don't know because we know neither your interests nor your skills. Show us you're serious about it and take initiative."
msgstr ""

#: ../../sources/faq.rst:232
# f745d918aa36403a9c5b96c1a8af2901
msgid "Write a draft proposal about what you want to do. Include what you understand the current state is (very roughly), what you would like to improve and how, etc."
msgstr ""

#: ../../sources/faq.rst:235
# c68cf3311a784b32ae15f57b899c3340
msgid "Discuss that proposal with us in a timely manner. Get feedback."
msgstr ""

#: ../../sources/faq.rst:236
# 2970c203f7dc47cead0d53323aee30d7
msgid "Be patient! Especially on IRC. We will try to get to you if we're available. If not, send an email and just wait. Most questions are already answered in the docs or somewhere else and can be found with some research. If your questions don't reflect that you've actually thought through what you're asking, that might not be received well."
msgstr ""

#: ../../sources/faq.rst:242
# 72056b242e11484fa7413e7375838d0a
msgid "Good luck! :-)"
msgstr ""

