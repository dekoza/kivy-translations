# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-14 16:22\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.lang.rst:3
# 2d9e6c3f13f04bed8431022f09d086c1
msgid "Kivy Language"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:2
# 3e217111a0144ce2a5d90152b273b1ba
msgid "The Kivy language is a language dedicated to describing user interface and interactions. You could compare this language to Qt's QML (http://qt.nokia.com), but we included new concepts such as rule definitions (which are somewhat akin to what you may know from CSS), templating and so on."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:9
# 29d909f439cd494e8a7ae796e74fb253
msgid "Overview"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:11
# dd441abee5224dd4a9c5b586311b33d3
msgid "The language consists of several constructs that you can use:"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:14
# a2308698a36d48c1a988c8d97a0d1c79
msgid "A rule is similar to a CSS rule. A rule applies to specific widgets (or classes thereof) in your widget tree and modifies them in a certain way. You can use rules to specify interactive behaviour or use them to add graphical representations of the widgets they apply to. You can target a specific class of widgets (similar to CSS' concept of a *class*) by using the ``cls`` attribute (e.g. ``cls=MyTestWidget``)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:22
# 5d6c134b61d54f878e8cc15dbb353126
msgid "You can use the language to create your entire user interface. A kv file must contain only one root widget at most."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:26
# ca38eea62254445e9e156803242b9534
msgid "*(introduced in version 1.0.5.)* Templates will be used to populate parts of your application, such as a list's content. If you want to design the look of an entry in a list (icon on the left, text on the right), you will use a template for that."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:33
# d39ef4859bdd47cb8df9e9ea47098893
msgid "Syntax of a kv File"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:37
# 77fdab179f744f2780ac11502cad0b92
msgid "A Kivy language file must have ``.kv`` as filename extension."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:39
# aa90b3089c184fa6894badc649251e12
msgid "The content of the file must always start with the Kivy header, where `version` must be replaced with the Kivy language version you're using. For now, use 1.0::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:47
# 56308173405e4a939f9db8b0adf2d5b2
msgid "The `content` can contain rule definitions, a root widget and templates::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:65
# cb7c96c920a546d6957f5ffc0b14a6ab
msgid "Regardless of whether it's a rule, root widget or template you're defining, the definition should look like this::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:82
# 19baa526820248be845196f29a88e4dc
msgid "Here `prop1` and `prop2` are the properties of `ClassName` and `prop3` is the property of `AnotherClass`. If the widget doesn't have a property with the given name, an :class:`~kivy.properties.ObjectProperty` will be automatically created and added to the instance."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:87
# d69a0fa22bf4409693c4c2f9a1b5bc14
msgid "`AnotherClass` will be created and added as a child of the `ClassName` instance."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:89
# 1bd5726f950f4784afe2308410ffb856
msgid "The indentation is important, and must be 4 spaces. Tabs are not allowed."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:90
# 288f4cf3b7e64dd0be1695d045b93292
msgid "The value of a property must be given on a single line (for now at least)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:91
# 0ec28d28b3ec4e9795c4817549c761aa
msgid "The `canvas` property is special: You can put graphics instructions in it to create a graphical representation of the current class."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:95
# eca66ce9355c4ee3b9217c753854a094
msgid "Here is a simple example of a kv file that contains a root widget::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:104
# c7943e08d3d74fe7acecbb4b783479ea
msgid "Value Expressions and Reserved Keywords"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:106
# 73f63f4b038f492096c1afe80837b59f
msgid "When you specify a property's value, the value is evaluated as a python expression. This expression can be static or dynamic, which means that the value can use the values of other properties using reserved keywords."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:111
# 1fd6ff19b8dc470e9ba5f04096162351
msgid "The keyword self references the \"current widget instance\"::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:117
# 1b8393b89311465e9a697405f8d6faf5
msgid "This keyword is available only in rule definitions, and represents the root widget of the rule (the first instance of the rule)::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:125
# 2731dde2fe4f415596ba8fa4cd5a47f0
msgid "Furthermore, if a class definition contains an id, you can use it as a keyword::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:133
# 26c065b9ae714982abca5f8152d3df40
msgid "Please note that the `id` will not be available in the widget instance; The `id` attribute will be not used."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:138
# 6fdc1798c7844e7b87c36ac7b263bc4c
msgid "Relation Between Values and Properties"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:140
# 4646572062e541fbb6faafba3d50c8ce
msgid "When you use the Kivy language, you might notice that we do some work behind the scenes to automatically make things work properly. You should know that :doc:`api-kivy.properties` implement the *observer* software design pattern: That means that you can bind your own function to be called when the value of a property changes (i.e. you passively `observe` the property for potential changes)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:147
# 65395d35ec504fe8add608a7eb7e20a1
msgid "The Kivy language detects properties in your `value` expression and will create create callbacks to automatically update the property via your expression when changes occur."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:151
# 95335fc7836b4682af7cec951a17cb0d
msgid "Here's a simple example that demonstrates this behaviour::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:156
# 65543417697c4226a37d056961d92a7b
msgid "In this example, the parser detects that `self.state` is a dynamic value (a property). The :data:`~kivy.uix.button.Button.state` property of the button can change at any moment (when the user touches it). We now want this button to display its own state as text, even as the state changes. To do this, we use the state property of the Button and use it in the value expression for the button's `text` property, which controls what text is displayed on the button (We also convert the state to a string representation). Now, whenever the button state changes, the text property will be updated automatically."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:166
# c9d45064bf3f472db02c74f1f173af32
msgid "Remember: The value is a python expression! That means that you can do something more interesting like::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:172
# dbd8d63ee0384c6a89a1c1c78239cafc
msgid "The Button text changes with the state of the button. By default, the button text will be 'Plop world', but when the button is being pressed, the text will change to 'Release me!'."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:178
# cd680b5036114021a3e8bacb2adc4c55
msgid "Graphical Instructions"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:180
# eff42142197a492a82f468d191700266
msgid "The graphical instructions are a special part of the Kivy language. This concerns the 'canvas' property definition::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:191
# 64ee328f49ea4b09a69b52ef44ab574f
msgid "All the classes added inside the canvas property must be derived from the :class:`~kivy.graphics.Instruction` class. You cannot put any Widget class inside the canvas property (as that would not make sense because a widget is not a graphics instruction)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:196
# cb0e0069ba6048e59dacfefe68d37885
msgid "If you want to do theming, you'll have the same question as in CSS: You don't know which rules have been executed before. In our case, the rules are executed in processing order (i.e. top-down)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:200
# 4b7eb62ed1d34080b9db97359680f20c
msgid "If you want to change how Buttons are rendered, you can create your own kv file and put something like this::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:215
# eb6488f120fb4484aa1beeb5d42a3b62
msgid "This will result in buttons having a red background, with the label in the bottom left, in addition to all the preceding rules. You can clear all the previous instructions by using the `Clear` command::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:232
# 57b3b9c210a94f3ea75277c54aaf5b8e
msgid "Then, only your rules that follow the `Clear` command will be taken into consideration."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:239
# 803d9aa2cfb64f2aa49832310450f5ad
msgid "Templates"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:244
# bde93e4d6627485cb14305827ad2d2cf
msgid "Syntax of template"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:246
# 70aeb70df3834dcfa56b1cac13d376c9
msgid "Using a template in Kivy require 2 things :"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:248
# 370d7296e31649b9bd104858eab5ba72
msgid "a context to pass for the context (will be ctx inside template)"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:249
# bf8fd550d7894f5bbb4735dc75685366
msgid "a kv definition of the template"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:251
# 43d439273a0143faae96659d5a9c8424
msgid "Syntax of a template::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:261
# 720c28af5c63495a820fbd0bcaf7752a
msgid "For example, for a list, you'll need to create a entry with a image on the left, and a label on the right. You can create a template for making that definition more easy to use. So, we'll create a template that require 2 entry in the context: a image filename and a title ::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:275
# 68b5ceceab2e4a7db1572e0f6598cbe0
msgid "Then in Python, you can create instanciate the template with ::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:293
# 3a3c0f7099b447f29027c65e353019aa
msgid "Template example"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:297
# ada4ab177c58451dbf39f47beaa891bd
msgid "Most of time, when you are creating screen into kv lang, you have lot of redefinition. In our example, we'll create a Toolbar, based on a BoxLayout, and put many Image that will react to on_touch_down::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:321
# 8e69cd87c0bf4bd3bd696baed6753863
msgid "We can see that the side and size_hint attribute are exactly the same. More than that, the callback in on_touch_down and the image are changing. Theses can be the variable part of the template that we can put into a context. Let's try to create a template for the Image::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:336
# 7ab31ed2fb854108a4dfa12ca61c23cb
msgid "The template can be used directly in the MyToolbar rule::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:350
# f3ac90fadae94c43ad86833adbac2ecf
msgid "That's all :)"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:354
# 81ab283bdd1c480ca8d4ab78db1b2974
msgid "Template limitations"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:356
# b1e45fff809646c18a348b0f25ea0d6e
msgid "When you are creating a context:"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:358
# 942b799171714333a127f5c3565702aa
msgid "you cannot use references other than \"root\"::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:367
# 0c57d09d04e9434ba230b4083f9048ac
msgid "all the dynamic part will be not understood::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:376
# c339c0d03c7d4d9ea80aa4cf94e0c725
msgid "Lang Directives"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:378
# 630bfbe120fa4428ae48f78b903ec63a
msgid "You can use directive to control part of the lang files. Directive is done with a comment line starting with::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:384
# 328080194f1d419e90f8e649250a07d5
msgid "import <package>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:388
#: ../../../kivy/lang.py:docstring of kivy.lang:422
# a1868f097e9e4061a968db723ffce074
# c742e434282b438db8f11d649af8ae65
msgid "Syntax::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:392
# 6894ce324e3b4950a34cd58a7707e1b3
msgid "You can import a package by writing::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:400
# 406bcce52c9447b68dd79532a7255a76
msgid "Or more complex::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:411
# e4042d8150c54cdda779d06b93343348
msgid "You can directly import class from a module::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:418
# 2d2edc97bdd24679bd9a616d049b0ca4
msgid "set <key> <expr>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:426
# 91a6831a1b714a3da981481766839398
msgid "Set a key that will be available anywhere in the kv. For example::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Builder:1
# 7d234fbfaafa4f77a290f5ad320642c4
msgid "Main instance of a :class:`BuilderBase`."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
# a4d7e6856dfe4393997af4f82c9d2e7a
# a86a3143b7594830a2d7815cfa6d992a
msgid "Bases: :class:`object`"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase:1
# e91378bb3080442b86ddb2fabc536eee
msgid "Kv objects are able to load a Kivy language file or string, return the root object of it and inject rules into the rule database."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.apply:1
# c1c0832e7bd14cfab858b8e145905e0e
msgid "Apply all the Kivy rules matching the widget on the widget."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_file:1
# 3267a73a35fa43fbb07d5e2c835f35e3
msgid "Insert a file into the language builder."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_file:5
#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_string:5
# fed20ac5e44c4a0681983d91a318ddb6
# cf6961c144144d689bddb8302f649770
msgid "If True, the Builder will raise an exception if you have a root widget inside the definition."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_string:1
# 8d3d169358984a7eaed9b2bacb4bb8e3
msgid "Insert a string into the Language Builder"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.match:1
# 89dfbd7b72324a6d947d99ea54ff2eeb
msgid "Return a list of all rules matching the widget."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.template:1
# 5b4a82651d7845d7b0985b84700a90e7
msgid "Create a specialized template using a specific context. .. versionadded:: 1.0.5"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.template:4
# 3e2a5541836b4b248d63f149a2c2df79
msgid "With template, you can construct custom widget from a kv lang definition by giving them a context. Check :ref:`Template usage <template_usage>`."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.unload_file:1
# 405b01d84e4a40f98a8b1df492e8acc2
msgid "Unload all rules associated to a previously imported file."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.unload_file:7
# d6332bbc9f0c446889e9f8933d803828
msgid "This will not remove rule or template already applied/used on current widget. It will act only for the next widget creation or template invocation."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser:1
# 4c20ce99cdd8408982afa8d6d49f7cd3
msgid "Create a Parser object to parse a Kivy language file or Kivy content."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.load_resource:1
# bfbb8223adaf47538d243d67375961bd
msgid "Load an external resource"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse:1
# 4dcc48bdb9e14838869b1631b79f8677
msgid "Parse the contents of a Parser file and return a list of root objects."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse_level:1
# e7d5814f7558433c904d988af39014eb
msgid "Parse the current level (level * 4) indentation."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse_version:1
# b56faed41e5745c7907406c59f0c0176
msgid "Parse the version line. The version line is always the first line, unindented and has the format: #:kivy <version>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.strip_comments:1
# 32323705922741cca0d447cf250537a9
msgid "Remove all comments from all lines in-place. Comments need to be on a single line and not at the end of a line. I.e., a comment line's first non-whitespace character must be a #."
msgstr ""

