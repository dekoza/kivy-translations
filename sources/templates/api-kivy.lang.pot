# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-15 00:13\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.lang.rst:3
# a92ac9853cf54b17a2d16c1db6b60a80
msgid "Kivy Language"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:2
# ac01ffb53bc24bc7af0d9849259503b8
msgid "The Kivy language is a language dedicated to describing user interface and interactions. You could compare this language to Qt's QML (http://qt.nokia.com), but we included new concepts such as rule definitions (which are somewhat akin to what you may know from CSS), templating and so on."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:9
# aa8dce0d56114664bc6ee7a76ef00e1e
msgid "Overview"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:11
# 60fb0653f1584e9783704b00b5d52875
msgid "The language consists of several constructs that you can use:"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:14
# 14e2b3b35e2c4042a8b008c2232a4e56
msgid "A rule is similar to a CSS rule. A rule applies to specific widgets (or classes thereof) in your widget tree and modifies them in a certain way. You can use rules to specify interactive behaviour or use them to add graphical representations of the widgets they apply to. You can target a specific class of widgets (similar to CSS' concept of a *class*) by using the ``cls`` attribute (e.g. ``cls=MyTestWidget``)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:22
# 454515909e184e28ba24c8fe3a5152f5
msgid "You can use the language to create your entire user interface. A kv file must contain only one root widget at most."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:26
# 194f69da91fd40d2b104d2954051f43a
msgid "*(introduced in version 1.0.5.)* Templates will be used to populate parts of your application, such as a list's content. If you want to design the look of an entry in a list (icon on the left, text on the right), you will use a template for that."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:33
# 5eb07923c41643839bd371d86c09d935
msgid "Syntax of a kv File"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:37
# 9b39faad5a98456c9baf0bfd064d55f2
msgid "A Kivy language file must have ``.kv`` as filename extension."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:39
# f9ee18cc7ff74010ad8a257d8d7b4046
msgid "The content of the file must always start with the Kivy header, where `version` must be replaced with the Kivy language version you're using. For now, use 1.0::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:47
# 3417127caa4c4a3abee39d8696539cf9
msgid "The `content` can contain rule definitions, a root widget and templates::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:65
# a6404e1172bc44d98b925d77da4370ad
msgid "Regardless of whether it's a rule, root widget or template you're defining, the definition should look like this::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:82
# d4a25054286147e7884bb7e30c0df273
msgid "Here `prop1` and `prop2` are the properties of `ClassName` and `prop3` is the property of `AnotherClass`. If the widget doesn't have a property with the given name, an :class:`~kivy.properties.ObjectProperty` will be automatically created and added to the instance."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:87
# 7847b91400ea4044a8b0e1d3942398a3
msgid "`AnotherClass` will be created and added as a child of the `ClassName` instance."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:89
# 92d1ec45893a4886bff49be12918a4de
msgid "The indentation is important, and must be 4 spaces. Tabs are not allowed."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:90
# f2a9b91d34524f3aa0e67c648e36190f
msgid "The value of a property must be given on a single line (for now at least)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:91
# 4825974396d44bcbb7b31f9fd5a1e2ae
msgid "The `canvas` property is special: You can put graphics instructions in it to create a graphical representation of the current class."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:95
# 08fc9f56efe24d0280136ae6cccb26d5
msgid "Here is a simple example of a kv file that contains a root widget::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:104
# 5030f03080a14d159fab61a7afefcf31
msgid "Value Expressions and Reserved Keywords"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:106
# 8f33fca0789e4a5f813bbd9767b7e735
msgid "When you specify a property's value, the value is evaluated as a python expression. This expression can be static or dynamic, which means that the value can use the values of other properties using reserved keywords."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:111
# 97a2a60b318b440d84094cebf44f06cf
msgid "The keyword self references the \"current widget instance\"::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:117
# 24c3966faefb47ef90f1fa0655f05ea5
msgid "This keyword is available only in rule definitions, and represents the root widget of the rule (the first instance of the rule)::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:125
# 2119fb1f32b34b448a84e3363895153a
msgid "Furthermore, if a class definition contains an id, you can use it as a keyword::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:133
# 17c1b8412ecf4d50ade08fa8f976b93b
msgid "Please note that the `id` will not be available in the widget instance; The `id` attribute will be not used."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:138
# ee58713ef2e3402bae7471a01211568c
msgid "Relation Between Values and Properties"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:140
# 1bc247950b574bfe83c11f9d0b239504
msgid "When you use the Kivy language, you might notice that we do some work behind the scenes to automatically make things work properly. You should know that :doc:`api-kivy.properties` implement the *observer* software design pattern: That means that you can bind your own function to be called when the value of a property changes (i.e. you passively `observe` the property for potential changes)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:147
# a1440a811b304a98a5c3b139d9157693
msgid "The Kivy language detects properties in your `value` expression and will create create callbacks to automatically update the property via your expression when changes occur."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:151
# aabc939d4d8f4c28b5d522861f223667
msgid "Here's a simple example that demonstrates this behaviour::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:156
# 37d0c36b1cdf4401b1fe6bd2c9cb8e56
msgid "In this example, the parser detects that `self.state` is a dynamic value (a property). The :data:`~kivy.uix.button.Button.state` property of the button can change at any moment (when the user touches it). We now want this button to display its own state as text, even as the state changes. To do this, we use the state property of the Button and use it in the value expression for the button's `text` property, which controls what text is displayed on the button (We also convert the state to a string representation). Now, whenever the button state changes, the text property will be updated automatically."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:166
# a825ac4f457c4cb5adbaa269f968e0da
msgid "Remember: The value is a python expression! That means that you can do something more interesting like::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:172
# 5d77c96c4e0b41c2a80fd6208c4bfb3e
msgid "The Button text changes with the state of the button. By default, the button text will be 'Plop world', but when the button is being pressed, the text will change to 'Release me!'."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:178
# 81b095829baf4ed69b3f740906c08f31
msgid "Graphical Instructions"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:180
# a3d636f23d074717be08484305456e0b
msgid "The graphical instructions are a special part of the Kivy language. This concerns the 'canvas' property definition::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:191
# ab65512997064fc38b5485be564c20a7
msgid "All the classes added inside the canvas property must be derived from the :class:`~kivy.graphics.Instruction` class. You cannot put any Widget class inside the canvas property (as that would not make sense because a widget is not a graphics instruction)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:196
# 1d956ee9b4ca404a89d22911ab864316
msgid "If you want to do theming, you'll have the same question as in CSS: You don't know which rules have been executed before. In our case, the rules are executed in processing order (i.e. top-down)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:200
# 267d672056744624a80d876ca97166e0
msgid "If you want to change how Buttons are rendered, you can create your own kv file and put something like this::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:215
# d8a9984fe488462a8e4fe40a53ad6396
msgid "This will result in buttons having a red background, with the label in the bottom left, in addition to all the preceding rules. You can clear all the previous instructions by using the `Clear` command::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:232
# 96f276e6311f446eb4a4eb01bc82a83e
msgid "Then, only your rules that follow the `Clear` command will be taken into consideration."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:239
# b77b95c48cd34c18b32401a6eaf9dcfd
msgid "Templates"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:244
# 8009eb8c7d04493bad03df9516e4d58b
msgid "Syntax of template"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:246
# 825a38b869c3456ab77d1496eac5e60d
msgid "Using a template in Kivy require 2 things :"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:248
# 3233392122b44e70af56e4963a65d190
msgid "a context to pass for the context (will be ctx inside template)"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:249
# 26199003ad0e4229b6af8b84d4abb625
msgid "a kv definition of the template"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:251
# bffe2cb056e140e0b5d8cec085bdd9a1
msgid "Syntax of a template::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:261
# ae789c13b496421a9a9df75901cf6289
msgid "For example, for a list, you'll need to create a entry with a image on the left, and a label on the right. You can create a template for making that definition more easy to use. So, we'll create a template that require 2 entry in the context: a image filename and a title ::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:275
# 1a8f4def71904b2882492e989f8d85a0
msgid "Then in Python, you can create instanciate the template with ::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:293
# 6b9885c22ba4426f8001d529e3a06d9e
msgid "Template example"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:297
# 50b667cbcd764c74a9fb16a96cb73bf4
msgid "Most of time, when you are creating screen into kv lang, you have lot of redefinition. In our example, we'll create a Toolbar, based on a BoxLayout, and put many Image that will react to on_touch_down::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:321
# 984dfa66f1044f07b723088cd6b60777
msgid "We can see that the side and size_hint attribute are exactly the same. More than that, the callback in on_touch_down and the image are changing. Theses can be the variable part of the template that we can put into a context. Let's try to create a template for the Image::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:336
# 283fd65d2bf547c69092dd5300f2f1a8
msgid "The template can be used directly in the MyToolbar rule::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:350
# 98969f3af6cc4332b965df5ac610fae7
msgid "That's all :)"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:354
# 57a102af745f4958a63b1357eef96ef8
msgid "Template limitations"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:356
# 0bf7081f697349ed94631eabd7added2
msgid "When you are creating a context:"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:358
# 8f388b8f63a64859971f52f2b6ec15a5
msgid "you cannot use references other than \"root\"::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:367
# 8c248e500eef441ca8f82eb2fab140a6
msgid "all the dynamic part will be not understood::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:376
# 3c7a7f9ac3834befb4d6cbf3ee16d8b2
msgid "Lang Directives"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:378
# 5c1f4e7768e14ed4bffb7dd7728b0c9f
msgid "You can use directive to control part of the lang files. Directive is done with a comment line starting with::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:384
# feebb17d017c4c6194763e3aa6472514
msgid "import <package>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:388
#: ../../../kivy/lang.py:docstring of kivy.lang:422
# 7fd62fefad9244af89a761af20d26d3d
# 8bd149e149334bcebe95304c42bf17ee
msgid "Syntax::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:392
# 3f5b504134674bf2bc20b3104692445d
msgid "You can import a package by writing::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:400
# 28b8da9a742340efbdb842d9b9433e49
msgid "Or more complex::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:411
# f1145153d92548a68f08b15df398327a
msgid "You can directly import class from a module::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:418
# f6729d6c2ecf400e84bd9eba9c5b1fa0
msgid "set <key> <expr>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:426
# 247be49b7e6c46628ff7e2ee689e368e
msgid "Set a key that will be available anywhere in the kv. For example::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Builder:1
# cbbaf1c3c2a84555a2664a0b7171b9e0
msgid "Main instance of a :class:`BuilderBase`."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
# bd83a0a6aea145018a55a8e59d0b6cd1
# 496a7a25f24d4326afb2b340b491c5a0
msgid "Bases: :class:`object`"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase:1
# 0525b193537a4923a3ed86feea1ce558
msgid "Kv objects are able to load a Kivy language file or string, return the root object of it and inject rules into the rule database."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.apply:1
# f00e5d9287d547d983980d7c09dbb8f4
msgid "Apply all the Kivy rules matching the widget on the widget."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_file:1
# 6917889e72374fd281bc87cdd93bc249
msgid "Insert a file into the language builder."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_file:5
#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_string:5
# d1c2f3a222f14458895574dd94e3b653
# 88cd1164bfa94151ae0652dd47ad3021
msgid "If True, the Builder will raise an exception if you have a root widget inside the definition."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_string:1
# 4a8e6d06389a4904b4582e0bf7fc2ffe
msgid "Insert a string into the Language Builder"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.match:1
# f1f9cef923bb419080163ffd92ef4509
msgid "Return a list of all rules matching the widget."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.template:1
# cf0ad22d63c745bea5c2e7f1d3c4f9c3
msgid "Create a specialized template using a specific context. .. versionadded:: 1.0.5"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.template:4
# a3c33ea870cc48a3b71a11fed9057fbe
msgid "With template, you can construct custom widget from a kv lang definition by giving them a context. Check :ref:`Template usage <template_usage>`."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.unload_file:1
# 59567349eb4748358e820da217262b78
msgid "Unload all rules associated to a previously imported file."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.unload_file:7
# 1aecb3f51b634a6cbc54b8ab42bca470
msgid "This will not remove rule or template already applied/used on current widget. It will act only for the next widget creation or template invocation."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser:1
# a1c92af156c441d5a9c7affc9ffe8018
msgid "Create a Parser object to parse a Kivy language file or Kivy content."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.load_resource:1
# 5a48bc5e4159481295ee2718e216abff
msgid "Load an external resource"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse:1
# b5b0a084a81b4aea819028222bae04d8
msgid "Parse the contents of a Parser file and return a list of root objects."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse_level:1
# b60093f77fa84c6c83e682425a4627d7
msgid "Parse the current level (level * 4) indentation."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse_version:1
# 9cf778986a7a46bfb0a8b3ba0112cb7c
msgid "Parse the version line. The version line is always the first line, unindented and has the format: #:kivy <version>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.strip_comments:1
# 66d57bde92c64020b05c66aa2b2dedb4
msgid "Remove all comments from all lines in-place. Comments need to be on a single line and not at the end of a line. I.e., a comment line's first non-whitespace character must be a #."
msgstr ""

