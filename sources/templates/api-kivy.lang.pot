# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-24 10:07\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.lang.rst:3
# ba9d85e16b8d4c2abae03b4c256416fb
msgid "Kivy Language"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:2
# ec41ccb1c972423699b2c8968e55f089
msgid "The Kivy language is a language dedicated to describing user interface and interactions. You could compare this language to Qt's QML (http://qt.nokia.com), but we included new concepts such as rule definitions (which are somewhat akin to what you may know from CSS), templating and so on."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:9
# 9fe18d90463d4dc98442c7aac51cce82
msgid "Overview"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:11
# b11afa2d7feb4874946b7ea903ead887
msgid "The language consists of several constructs that you can use:"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:14
# b89c5fb17af24182aa17f1d4aa7ff7d3
msgid "A rule is similar to a CSS rule. A rule applies to specific widgets (or classes thereof) in your widget tree and modifies them in a certain way. You can use rules to specify interactive behaviour or use them to add graphical representations of the widgets they apply to. You can target a specific class of widgets (similar to CSS' concept of a *class*) by using the ``cls`` attribute (e.g. ``cls=MyTestWidget``)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:22
# 2e0fd1502ffe42ff8e6ab5f70b9a20af
msgid "You can use the language to create your entire user interface. A kv file must contain only one root widget at most."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:26
# 762ff49cefc74f2782092489bd57f46f
msgid "*(introduced in version 1.0.5.)* Templates will be used to populate parts of your application, such as a list's content. If you want to design the look of an entry in a list (icon on the left, text on the right), you will use a template for that."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:33
# b87ec3ec4b3342829e6d78991def35da
msgid "Syntax of a kv File"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:37
# 0518d80b64854ab4808079fb80b236ee
msgid "A Kivy language file must have ``.kv`` as filename extension."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:39
# bdfc71209f7e4f98b5de80bdf11ca3b4
msgid "The content of the file must always start with the Kivy header, where `version` must be replaced with the Kivy language version you're using. For now, use 1.0::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:47
# bc694fddf91d489297a2dcca21ccf860
msgid "The `content` can contain rule definitions, a root widget and templates::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:65
# 8b3c1f2d0a7e439686daf90d3db6964a
msgid "Regardless of whether it's a rule, root widget or template you're defining, the definition should look like this::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:82
# 57b2911d479e4129aaa18b5b826d5af4
msgid "Here `prop1` and `prop2` are the properties of `ClassName` and `prop3` is the property of `AnotherClass`. If the widget doesn't have a property with the given name, an :class:`~kivy.properties.ObjectProperty` will be automatically created and added to the instance."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:87
# 58e6103091c74a94bc473f299169d764
msgid "`AnotherClass` will be created and added as a child of the `ClassName` instance."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:89
# 7e006b9e17cc48cfab31bbbccd941385
msgid "The indentation is important, and must be 4 spaces. Tabs are not allowed."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:90
# 8693c89e82284544a6a9f775d678a735
msgid "The value of a property must be given on a single line (for now at least)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:91
# 8d0d15182a92479682fa60cca182eef0
msgid "The `canvas` property is special: You can put graphics instructions in it to create a graphical representation of the current class."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:95
# e7897c563f864c638ef0ab3e86f3b7e1
msgid "Here is a simple example of a kv file that contains a root widget::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:104
# a27363d5b5424ad0bf24b7110e9f11fa
msgid "Value Expressions and Reserved Keywords"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:106
# 0b336644acf149288b3f53db259e03dd
msgid "When you specify a property's value, the value is evaluated as a python expression. This expression can be static or dynamic, which means that the value can use the values of other properties using reserved keywords."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:111
# b417e6424bdd4662bad17409a58f2795
msgid "The keyword self references the \"current widget instance\"::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:117
# 72ed94849a2643b3aa8ac13f2446ac42
msgid "This keyword is available only in rule definitions, and represents the root widget of the rule (the first instance of the rule)::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:125
# 5f7ff03a988640a0bdd2b2dfcf684328
msgid "Furthermore, if a class definition contains an id, you can use it as a keyword::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:133
# c1de58415070466ba5858eaf2591cd83
msgid "Please note that the `id` will not be available in the widget instance; The `id` attribute will be not used."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:138
# 4e71903011cb4749a17038540a633006
msgid "Relation Between Values and Properties"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:140
# 26960ddc846646a3b9c3b72e96a20916
msgid "When you use the Kivy language, you might notice that we do some work behind the scenes to automatically make things work properly. You should know that :doc:`api-kivy.properties` implement the *observer* software design pattern: That means that you can bind your own function to be called when the value of a property changes (i.e. you passively `observe` the property for potential changes)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:147
# f3ee39a8a93e413db10db2939325d318
msgid "The Kivy language detects properties in your `value` expression and will create create callbacks to automatically update the property via your expression when changes occur."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:151
# 44042d18bf8d4f408b69270b4e64b43d
msgid "Here's a simple example that demonstrates this behaviour::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:156
# 33f1f44cb3684f28aec6ffbeb20f7a9f
msgid "In this example, the parser detects that `self.state` is a dynamic value (a property). The :data:`~kivy.uix.button.Button.state` property of the button can change at any moment (when the user touches it). We now want this button to display its own state as text, even as the state changes. To do this, we use the state property of the Button and use it in the value expression for the button's `text` property, which controls what text is displayed on the button (We also convert the state to a string representation). Now, whenever the button state changes, the text property will be updated automatically."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:166
# 4c1cba629a6646e49dcbac2667390f85
msgid "Remember: The value is a python expression! That means that you can do something more interesting like::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:172
# feac558e236b41c88910d234795bf5da
msgid "The Button text changes with the state of the button. By default, the button text will be 'Plop world', but when the button is being pressed, the text will change to 'Release me!'."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:178
# 0884f55683854baaafea300b4d97f591
msgid "Graphical Instructions"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:180
# fbf57d91c55e4378abc050fd387901e7
msgid "The graphical instructions are a special part of the Kivy language. This concerns the 'canvas' property definition::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:191
# 2b147fccef584a7c9858659837de9b1d
msgid "All the classes added inside the canvas property must be derived from the :class:`~kivy.graphics.Instruction` class. You cannot put any Widget class inside the canvas property (as that would not make sense because a widget is not a graphics instruction)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:196
# 703212da24984f0cb7e053013e884f5c
msgid "If you want to do theming, you'll have the same question as in CSS: You don't know which rules have been executed before. In our case, the rules are executed in processing order (i.e. top-down)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:200
# dc8f070e3b3d4e42abf47ff39e1e7e61
msgid "If you want to change how Buttons are rendered, you can create your own kv file and put something like this::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:215
# 0b1469b28fe642ce90b11131283a9726
msgid "This will result in buttons having a red background, with the label in the bottom left, in addition to all the preceding rules. You can clear all the previous instructions by using the `Clear` command::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:232
# 2932f13e4f9d43548a034dc265d25331
msgid "Then, only your rules that follow the `Clear` command will be taken into consideration."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:239
# c2a1cc927e354f0c9364b1a25b82a49c
msgid "Templates"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:244
# 30bc06dc9c7140fb86fb2aa9f996ea0f
msgid "Syntax of template"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:246
# adac4f42dfe8424597cfb58deee4ea80
msgid "Using a template in Kivy require 2 things :"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:248
# 13177c6b9b424bd4862b3214b40506ce
msgid "a context to pass for the context (will be ctx inside template)"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:249
# 6c38b74ba7954b47b8094891f7d9aabc
msgid "a kv definition of the template"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:251
# 3ee4eff4d3c54eb29935ca1d1022bc6f
msgid "Syntax of a template::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:261
# 48712760e21045c3b25877ec0082ffdf
msgid "For example, for a list, you'll need to create a entry with a image on the left, and a label on the right. You can create a template for making that definition more easy to use. So, we'll create a template that require 2 entry in the context: a image filename and a title ::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:275
# 7e77efc87d384c379c3344810833cbdd
msgid "Then in Python, you can create instanciate the template with ::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:293
# ef51e4d48d504958a9fe3567a4c73498
msgid "Template example"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:297
# d8360d4f1fe141cca64c17e86abc5d93
msgid "Most of time, when you are creating screen into kv lang, you have lot of redefinition. In our example, we'll create a Toolbar, based on a BoxLayout, and put many Image that will react to on_touch_down::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:321
# f2813f1aae7b4fd29510c202c4a429b9
msgid "We can see that the side and size_hint attribute are exactly the same. More than that, the callback in on_touch_down and the image are changing. Theses can be the variable part of the template that we can put into a context. Let's try to create a template for the Image::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:336
# 9124772619c04b2882bc87124fa2da9a
msgid "The template can be used directly in the MyToolbar rule::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:350
# b423b3acfd08423bb8dc93f537ac194c
msgid "That's all :)"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:354
# a54938ebd50a49148d972112bc8ef408
msgid "Template limitations"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:356
# 93a7d029a022417e89d2e7cac0c49b9f
msgid "When you are creating a context:"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:358
# dcf7bbb04fb445a198f42712800c97f9
msgid "you cannot use references other than \"root\"::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:367
# 76849d936abc4f0396ab06005edc4dfc
msgid "all the dynamic part will be not understood::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:376
# 93e86ac364c94e529645abc05c9391b4
msgid "Lang Directives"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:378
# a5f142ae42e241ceb9d6d75e8355f674
msgid "You can use directive to control part of the lang files. Directive is done with a comment line starting with::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:384
# a4b8641e48ac440c9917b5079df8aa93
msgid "import <package>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:388
#: ../../../kivy/lang.py:docstring of kivy.lang:422
# b12aa8e1b5594811b3654256f761e828
# ac53916810034f7eba9559171990dcd5
msgid "Syntax::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:392
# 5fa6c010ff164d778cf9e380cc6bb244
msgid "You can import a package by writing::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:400
# 4948c5e30ab24d0dbf9c5a4bea6ba980
msgid "Or more complex::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:411
# a2b20acc5b5d48c4b801d6619735e1d2
msgid "You can directly import class from a module::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:418
# 316f0c8623dc4b1986fb10713c675871
msgid "set <key> <expr>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:426
# 6932cf33b7f649b69e83bd22bf2c98ae
msgid "Set a key that will be available anywhere in the kv. For example::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Builder:1
# 6e943a2f94af4dbab647d908a5013885
msgid "Main instance of a :class:`BuilderBase`."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
# febb002a2c2640beadb949d4e4428a28
# dce8cec2f12e4dc6a4c65ef5111824a1
msgid "Bases: :class:`object`"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase:1
# 3a1b1a981c34475a9430a120a11b8e0a
msgid "Kv objects are able to load a Kivy language file or string, return the root object of it and inject rules into the rule database."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.apply:1
# fc04592650b0404fb806b0815216cd42
msgid "Apply all the Kivy rules matching the widget on the widget."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_file:1
# b2185dbfbdb445b99418d693c6df4a59
msgid "Insert a file into the language builder."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_file:5
#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_string:5
# 691ace0f86b742f698bfbf314d7de84b
# bd0d48b52af345f289b0fa37342aecd0
msgid "If True, the Builder will raise an exception if you have a root widget inside the definition."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_string:1
# 8346cbd48a2e4e8bb750cce53fecc906
msgid "Insert a string into the Language Builder"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.match:1
# e0d1a09077e94ad9841cf1211d0d94a0
msgid "Return a list of all rules matching the widget."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.template:1
# ad41b0f5bf5746cdb1ee848151a72d22
msgid "Create a specialized template using a specific context. .. versionadded:: 1.0.5"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.template:4
# 6b359663c1b842479e63312eac019c6d
msgid "With template, you can construct custom widget from a kv lang definition by giving them a context. Check :ref:`Template usage <template_usage>`."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.unload_file:1
# ae796a2fa884476cadc69a978dc17ce5
msgid "Unload all rules associated to a previously imported file."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.unload_file:7
# ca6241a62dd14cbbbf7f6e9c5894835f
msgid "This will not remove rule or template already applied/used on current widget. It will act only for the next widget creation or template invocation."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser:1
# 0e963c7c0aa948eaa5097b89ba06b517
msgid "Create a Parser object to parse a Kivy language file or Kivy content."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.load_resource:1
# b3ed16e349b946b79ad4c09e031fddc2
msgid "Load an external resource"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse:1
# 0325cb924f4c4db08953084a4799f371
msgid "Parse the contents of a Parser file and return a list of root objects."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse_level:1
# f6aef65ff4904b3c8d0079bd7fb2b202
msgid "Parse the current level (level * 4) indentation."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse_version:1
# 564e71888b704cd5803e1a4f7b37388f
msgid "Parse the version line. The version line is always the first line, unindented and has the format: #:kivy <version>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.strip_comments:1
# b58281a1c31841108eda9e1b1af33653
msgid "Remove all comments from all lines in-place. Comments need to be on a single line and not at the end of a line. I.e., a comment line's first non-whitespace character must be a #."
msgstr ""

