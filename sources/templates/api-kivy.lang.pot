# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-14 16:32\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.lang.rst:3
# 5d26951448ec4b5b8060b848dee6db48
msgid "Kivy Language"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:2
# 795433ac30014fca84af004116298963
msgid "The Kivy language is a language dedicated to describing user interface and interactions. You could compare this language to Qt's QML (http://qt.nokia.com), but we included new concepts such as rule definitions (which are somewhat akin to what you may know from CSS), templating and so on."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:9
# 737c23652ae7407db086ef1bb37a9e30
msgid "Overview"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:11
# 9c55bd0c2cd9409dbbcaca05d5b2385e
msgid "The language consists of several constructs that you can use:"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:14
# 8c6b5f66dd544190809ea5b6f3f7d79f
msgid "A rule is similar to a CSS rule. A rule applies to specific widgets (or classes thereof) in your widget tree and modifies them in a certain way. You can use rules to specify interactive behaviour or use them to add graphical representations of the widgets they apply to. You can target a specific class of widgets (similar to CSS' concept of a *class*) by using the ``cls`` attribute (e.g. ``cls=MyTestWidget``)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:22
# e3f79a8539304e268013c474a79d616e
msgid "You can use the language to create your entire user interface. A kv file must contain only one root widget at most."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:26
# cf1f948788494af284a2ad26fa5de473
msgid "*(introduced in version 1.0.5.)* Templates will be used to populate parts of your application, such as a list's content. If you want to design the look of an entry in a list (icon on the left, text on the right), you will use a template for that."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:33
# 1a66009c136b4907a5f11f0070c4bc31
msgid "Syntax of a kv File"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:37
# fbc824a9eb4a426d8f9743881d6d1e4d
msgid "A Kivy language file must have ``.kv`` as filename extension."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:39
# 1ffae238d19f4b7a85418443e0caa6dd
msgid "The content of the file must always start with the Kivy header, where `version` must be replaced with the Kivy language version you're using. For now, use 1.0::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:47
# 99f0a03eefd444a7917bcc58e582d9a2
msgid "The `content` can contain rule definitions, a root widget and templates::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:65
# 881312d3247541e983c64756ddc7cf8f
msgid "Regardless of whether it's a rule, root widget or template you're defining, the definition should look like this::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:82
# b63f3c57006f474ea33fe6564d593f4e
msgid "Here `prop1` and `prop2` are the properties of `ClassName` and `prop3` is the property of `AnotherClass`. If the widget doesn't have a property with the given name, an :class:`~kivy.properties.ObjectProperty` will be automatically created and added to the instance."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:87
# c57ac8224894475c95d7f9bd9b4939db
msgid "`AnotherClass` will be created and added as a child of the `ClassName` instance."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:89
# 5899e659e3e64aa2943814f3832ef3ef
msgid "The indentation is important, and must be 4 spaces. Tabs are not allowed."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:90
# 6594d0e817f241c6902f898b48815750
msgid "The value of a property must be given on a single line (for now at least)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:91
# 4bda97c972c94e7dada4b6aec2d1ddf5
msgid "The `canvas` property is special: You can put graphics instructions in it to create a graphical representation of the current class."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:95
# 52d8f40d812842f18e4844e078ba0848
msgid "Here is a simple example of a kv file that contains a root widget::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:104
# d2398a07dab34d0dbe15bc2c853f1f0b
msgid "Value Expressions and Reserved Keywords"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:106
# a6eafdc2035a46f0bf874dbc94dd7ed0
msgid "When you specify a property's value, the value is evaluated as a python expression. This expression can be static or dynamic, which means that the value can use the values of other properties using reserved keywords."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:111
# f419fccabe0a4f378f806dddeec9d9fa
msgid "The keyword self references the \"current widget instance\"::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:117
# 06de6e8b4c154b2fac69b29b9845e80d
msgid "This keyword is available only in rule definitions, and represents the root widget of the rule (the first instance of the rule)::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:125
# 0c77c5a3ac27453e8ef85116b9157049
msgid "Furthermore, if a class definition contains an id, you can use it as a keyword::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:133
# ee8915e4eb47432eb929e68785509031
msgid "Please note that the `id` will not be available in the widget instance; The `id` attribute will be not used."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:138
# 6bd518f4029d4c88adcd27bb86eeb7f5
msgid "Relation Between Values and Properties"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:140
# 17c3db1a2465451aa63e4d54166a57a8
msgid "When you use the Kivy language, you might notice that we do some work behind the scenes to automatically make things work properly. You should know that :doc:`api-kivy.properties` implement the *observer* software design pattern: That means that you can bind your own function to be called when the value of a property changes (i.e. you passively `observe` the property for potential changes)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:147
# e191e7ee85a7499faf51417d786f6673
msgid "The Kivy language detects properties in your `value` expression and will create create callbacks to automatically update the property via your expression when changes occur."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:151
# 5eebf9acf5154916913997d195e2320e
msgid "Here's a simple example that demonstrates this behaviour::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:156
# e3ae1cb2952247c7954e5a7f8c0fa88c
msgid "In this example, the parser detects that `self.state` is a dynamic value (a property). The :data:`~kivy.uix.button.Button.state` property of the button can change at any moment (when the user touches it). We now want this button to display its own state as text, even as the state changes. To do this, we use the state property of the Button and use it in the value expression for the button's `text` property, which controls what text is displayed on the button (We also convert the state to a string representation). Now, whenever the button state changes, the text property will be updated automatically."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:166
# 44fa4fe3630f491c88c0bfbd0c4c1cbb
msgid "Remember: The value is a python expression! That means that you can do something more interesting like::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:172
# 02056c3da8c142debf83af59b531134f
msgid "The Button text changes with the state of the button. By default, the button text will be 'Plop world', but when the button is being pressed, the text will change to 'Release me!'."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:178
# 436847d14ece4cabb375c56be370733a
msgid "Graphical Instructions"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:180
# 9cec527a9bf74effb3a42d9df920638c
msgid "The graphical instructions are a special part of the Kivy language. This concerns the 'canvas' property definition::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:191
# b66d4636b95b4f96b0da9fc982badf0b
msgid "All the classes added inside the canvas property must be derived from the :class:`~kivy.graphics.Instruction` class. You cannot put any Widget class inside the canvas property (as that would not make sense because a widget is not a graphics instruction)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:196
# a883db3581ab489a8f79c2b42ea2c0ed
msgid "If you want to do theming, you'll have the same question as in CSS: You don't know which rules have been executed before. In our case, the rules are executed in processing order (i.e. top-down)."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:200
# 8129cee0914e443086f6888c9752236c
msgid "If you want to change how Buttons are rendered, you can create your own kv file and put something like this::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:215
# 1b48f042af1146b2ae7c5726543d5cd8
msgid "This will result in buttons having a red background, with the label in the bottom left, in addition to all the preceding rules. You can clear all the previous instructions by using the `Clear` command::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:232
# 53c674fdf6124afca99104635f2f12d7
msgid "Then, only your rules that follow the `Clear` command will be taken into consideration."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:239
# 588441e3d0d64bba8e65af3606f73d68
msgid "Templates"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:244
# c0288a6c07e44d64a5bc0fdc054b5498
msgid "Syntax of template"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:246
# d6ed97cceb164cf38a846dfe20ba168e
msgid "Using a template in Kivy require 2 things :"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:248
# daf6e65c3f2c42f78a0e9d933535c133
msgid "a context to pass for the context (will be ctx inside template)"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:249
# 986b066a49814c40a722710291065337
msgid "a kv definition of the template"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:251
# f4cda83deda84b73b00f3261efca701a
msgid "Syntax of a template::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:261
# c5f6ec9ad6144688aa4ed768bfac4bdd
msgid "For example, for a list, you'll need to create a entry with a image on the left, and a label on the right. You can create a template for making that definition more easy to use. So, we'll create a template that require 2 entry in the context: a image filename and a title ::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:275
# 0007bf63e9584ba2a2152be9d67067d3
msgid "Then in Python, you can create instanciate the template with ::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:293
# f5bce62dd18748aab0f71265a8ef0693
msgid "Template example"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:297
# 59c76e5aad8b46a083bc640e3a0b6291
msgid "Most of time, when you are creating screen into kv lang, you have lot of redefinition. In our example, we'll create a Toolbar, based on a BoxLayout, and put many Image that will react to on_touch_down::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:321
# 581782a98a2f467381a339fb04d75f06
msgid "We can see that the side and size_hint attribute are exactly the same. More than that, the callback in on_touch_down and the image are changing. Theses can be the variable part of the template that we can put into a context. Let's try to create a template for the Image::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:336
# dbeb3131f7cf49e4a5480af2b68d91b8
msgid "The template can be used directly in the MyToolbar rule::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:350
# 2f62c3f696f641abbf35e8ae3e1c84ab
msgid "That's all :)"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:354
# 0cb512a1955d41ac89e18fb8ae9bfa6a
msgid "Template limitations"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:356
# 5462b9d1ae12479583215f74f4c8d4e3
msgid "When you are creating a context:"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:358
# 3fa60304b5e94d4a83632b6d20a5faa9
msgid "you cannot use references other than \"root\"::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:367
# c1caa451b7114ceb8a67f35a5c7215af
msgid "all the dynamic part will be not understood::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:376
# 790ce92f4c86459199373ab587f9439e
msgid "Lang Directives"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:378
# 6534328cfed148fd9749c3e89e8768d9
msgid "You can use directive to control part of the lang files. Directive is done with a comment line starting with::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:384
# 90c2e936c345425caeb81f854348eeb9
msgid "import <package>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:388
#: ../../../kivy/lang.py:docstring of kivy.lang:422
# ab8622c50fae4b0c87ec0a73c5fc9d8a
# 94644c344919408cbff132f37b9e3fa8
msgid "Syntax::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:392
# a5e4a10acf3944898c2bca30b599e0e1
msgid "You can import a package by writing::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:400
# e004bf3da16144fbac09579bdf686221
msgid "Or more complex::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:411
# c72f121a930b44298cf0cb20dfc03836
msgid "You can directly import class from a module::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:418
# 008eedcff1774bf687783518287a9d5f
msgid "set <key> <expr>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang:426
# 6fc959980662455bbd615af6fd72489d
msgid "Set a key that will be available anywhere in the kv. For example::"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Builder:1
# 2ff71f3a29294d8db10029baf2b9d1fb
msgid "Main instance of a :class:`BuilderBase`."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
# 64acb66991084e4f863845f290edd71c
# 1ad98c25bc9141e89c77a023579fb578
msgid "Bases: :class:`object`"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase:1
# 110adf22666149e297585b4fa700dac7
msgid "Kv objects are able to load a Kivy language file or string, return the root object of it and inject rules into the rule database."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.apply:1
# 204ba19c0f994fd8882d471c7ef51651
msgid "Apply all the Kivy rules matching the widget on the widget."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_file:1
# f5bad3a5840845ce9f956c3afff7b9e6
msgid "Insert a file into the language builder."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_file:5
#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_string:5
# 629b86ac1d834562a7bcf40da9cfed0b
# 610505074ec64440bc53a4b65223b24a
msgid "If True, the Builder will raise an exception if you have a root widget inside the definition."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.load_string:1
# 9145ea5c68094ca4a8dda02341e9f306
msgid "Insert a string into the Language Builder"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.match:1
# c02fb40a0ea745c7b9237205438af93e
msgid "Return a list of all rules matching the widget."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.template:1
# 2e60fb7563ae4e18995f0d985f4b631b
msgid "Create a specialized template using a specific context. .. versionadded:: 1.0.5"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.template:4
# aef1dbba6cd4432a9ae838c7e2762ee4
msgid "With template, you can construct custom widget from a kv lang definition by giving them a context. Check :ref:`Template usage <template_usage>`."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.unload_file:1
# 26dd9baea99143038476b04959ebe770
msgid "Unload all rules associated to a previously imported file."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.BuilderBase.unload_file:7
# 6b2c26eccf6748e99a27b3750dfc0245
msgid "This will not remove rule or template already applied/used on current widget. It will act only for the next widget creation or template invocation."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser:1
# 24e318c668d14949b96541d0e92a5c15
msgid "Create a Parser object to parse a Kivy language file or Kivy content."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.load_resource:1
# 1d16c601d600414ca3c9cc7abe3fc8e8
msgid "Load an external resource"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse:1
# fc33bc19487a4fb5811dea00931ab260
msgid "Parse the contents of a Parser file and return a list of root objects."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse_level:1
# 69d339d6556847d0987a43c03e44581d
msgid "Parse the current level (level * 4) indentation."
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.parse_version:1
# 9c2be8d0b8594a3e8ac7581a23c79e22
msgid "Parse the version line. The version line is always the first line, unindented and has the format: #:kivy <version>"
msgstr ""

#: ../../../kivy/lang.py:docstring of kivy.lang.Parser.strip_comments:1
# bd4bfc268747498dab39bc9c70437e86
msgid "Remove all comments from all lines in-place. Comments need to be on a single line and not at the end of a line. I.e., a comment line's first non-whitespace character must be a #."
msgstr ""

