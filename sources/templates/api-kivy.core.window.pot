# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.8-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-24 09:59\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.core.window.rst:3
# 072b1112b5d549a0b1fba8b636b43ea6
msgid "Window"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window:2
# 26c421b7223d46259c5e607a6edce9da
msgid "Core class for create the default Kivy window. Kivy support only one window creation. Don't try to create more than one."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
# 2db570ef57a84c449918a7fe74965cce
# 3cfbfc5106f346018521db64dbb3fd89
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard:1
# 118afde0566b4797884c751c1e963a04
msgid "Keyboard interface, that is returned by :meth:`WindowBase.request_keyboard`. When you request a keyboard, you'll get an instance of this class. Whatever is the keyboard input (system or virtual keyboard), you'll receive event though this instance."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard:8
# 1429932ac9274ed59e7fd294203132aa
msgid "Fired when a new key is down"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard:10
#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:35
# 26440ea721094ffdad8f8e2d2c0ecff6
# 79581ff4a25a424bb314a81fde269583
msgid "Fired when a key is up"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard:12
# 8f02bdd543d74e26b03988e3ec982c98
msgid "Here is an example about how to request a Keyboard, according to the current configuration:"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard.callback:1
# 050a2c3066c04c4d8d622bb4bf336dc5
msgid "Callback that will be called when the keyboard is released"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard.keycode_to_string:1
# 8e210733d8f741f68a2a700edb277d9c
msgid "Convert a keycode number to a string, according to the :data:`Keyboard.keycodes`. If the value is not found inside the keycodes, it will return ''."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard.keycodes:1
# 8948c0ac811f47de807dc80863601c1d
msgid "Keycodes mapping, between str <-> int. Theses keycode are currently taken from pygame.key. But when a new provider will be used, it must do the translation to theses keycodes too."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard.release:1
# 3a2ae3758b494d3faa5e7a5b9dd2fd3a
msgid "Call this method to release the current keyboard. This will ensure that keyboard is not attached to you anymore."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard.string_to_keycode:1
# 38558b835b3241aab24385bb43d80902
msgid "Convert a string to a keycode number, according to the :data:`Keyboard.keycodes`. If the value is not found in the keycodes, it will return -1."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard.target:1
# 64990ccd5a8e45d7902f4d3de1871d3b
msgid "Target that have requested the keyboard"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard.widget:1
# 4b85aca0234c41798446cc7bdcc6dd04
msgid "VKeyboard widget, if allowed by the configuration"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Keyboard.window:1
# 555ab2fef2bb451eb013bea702d8cb5d
msgid "Window which the keyboard is attached too"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:1
# dc4f4d5efb374c4fb804f98413c2bc37
msgid "WindowBase is a abstract window widget, for any window implementation."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:5
# 5b4011a998354ab7af3b4ad127164c4b
msgid "Make window as fullscreen, check config documentation for more explaination about the values."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:8
# 48753c5767d146c39930e23f20889968
msgid "Width of window"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:10
# aee0ecc618d64fb6b4c61bec8c0260e8
msgid "Height of window"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:14
# 2dcae4fdf67540fb9dc20fd59c9ea88f
msgid "Fired when a new :class:`~kivy.input.motionevent.MotionEvent` is dispatched"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:17
# 768431e231fb48bfa91e16bdb6738ca4
msgid "Fired when a new touch appear"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:19
# d4441233bf7e464aa8ef9fbe30831001
msgid "Fired when an existing touch is moved"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:21
# 577691fe44b840949f2c353ab75c1b7b
msgid "Fired when an existing touch disapear"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:23
# c77bf63c0f1d43d7818d0d9c0f9b6027
msgid "Fired when the :class:`Window` is beeing drawed"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:25
# d1723577d03f49deb9c4f2b3c2d5e8a2
msgid "Fired when the :class:`Window` GL surface is beeing flipped"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:27
# 2958220acaff436386a4767907d1a04b
msgid "Fired when the :class:`Window` is beeing rotated"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:29
# fd2c0e63f19648b293cc2c4a9545ac64
msgid "Fired when the :class:`Window` is closed"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:31
# 6acea069c96b4a2b9972bc9404f21275
msgid "Fired when the keyboard is in action"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase:33
# 0189427d7c5e4a9297f9276249760b46
msgid "Fired when a key is down"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.add_widget:1
# 1ab3500fddb14c13a7e8f8e9238a69dd
msgid "Add a widget on window"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.center:1
# d80055da250044d3be3a30891220ed07
msgid "Rotated window center"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.clear:1
# c5e178b6d2384489a729e60f4bb0a8fe
msgid "Clear the window with background color"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.clearcolor:1
# ecf1157376d044bab63be9a5730378a0
msgid "Color used to clear window::"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.close:1
# 7b331f11ae3844c482b4d6962a5e3bc8
msgid "Close the window"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.create_window:1
# e9afa3edeb4a42a9bbd77dc43cfe2d1e
msgid "Will create the main window and configure it."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.create_window:4
# 8c578297602945a1bfd0ad1014fdc10e
msgid "This method is called automatically at runtime. If you call it, it will recreate a RenderContext and Canvas. This mean you'll have a new graphics tree, and the old one will be unusable."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.create_window:8
# 0960dbc3661d40d490a6b36c4cce33a5
msgid "This method exist to permit the creation of a new OpenGL context AFTER closing the first one. (Like using runTouchApp() and stopTouchApp())."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.create_window:12
# 76e0d236dab642a6bb77e876c148331e
msgid "This method have been only tested in unittest environment, and will be not suitable for Applications."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.create_window:15
# b22f7b21dcae4e37af2f2535edf05682
msgid "Again, don't use this method unless you know exactly what you are doing !"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.flip:1
# c6a479173a8244f8a01ca9044f1d53ab
msgid "Flip between buffers"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.height:1
# 73ac7545672c4b818085dcd7fc3c1565
msgid "Rotated window height"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_close:1
# 8415c6b9d126400390c1e85c2926f6a7
msgid "Event called when the window is closed"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_flip:1
# ac3de63e07c9491294e2da5e8f4c1003
msgid "Flip between buffers (event)"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_key_down:1
# 7d4de3dbd8504070aa9eabb34cdea5f3
msgid "Event called when a key is down (same arguments as on_keyboard)"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_key_up:1
# af61980c69d94ff59adfbb0e99e587ca
msgid "Event called when a key is up (same arguments as on_keyboard)"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_keyboard:1
# 6c81f4c4a47546638599a76a84432270
msgid "Event called when keyboard is in action"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_keyboard:4
# fa4453d4257d4624b9edcbc3da8fdd77
msgid "Some providers may omit `scancode`, `unicode` and/or `modifier`!"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_motion:1
# ddb1de34cda74bb0a75a31c0db864f00
msgid "Event called when a Motion Event is received."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_motion:5
# d4443a2a0fcd4d72b2e294bd1fa36078
msgid "One of 'begin', 'update', 'end'"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_motion:7
# 3e36f85aa70641fa8bd1486aaefbde4f
msgid "Motion Event currently dispatched"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_mouse_down:1
# 0f771487cbb24402b10c1ab2d18cf706
msgid "Event called when mouse is in action (press/release)"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_mouse_move:1
#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_mouse_up:1
# 2cc1cf47ade84a5eb441de22319a384f
# c3cae2b75b4b4a5f9a56edf21e304aaf
msgid "Event called when mouse is moving, with buttons pressed"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_resize:1
# 9951365348a744b08dd3213b7c7f77e6
msgid "Event called when the window is resized"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_rotate:1
# a67749111f744be28ae154bd4a6e6593
msgid "Event called when the screen have been rotated"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_touch_down:1
# 2d862922267b40b585bcc222afce1588
msgid "Event called when a touch is down"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_touch_move:1
# 67e5745889fe4a3382346c76cbe5f988
msgid "Event called when a touch move"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.on_touch_up:1
# 9961eb10ebc8409abb8a206a5d0949e0
msgid "Event called when a touch up"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.release_all_keyboards:3
# 4065643cca314e3ca237a1a5056e8d0a
msgid "This will ensure that no virtual keyboard / system keyboard are actually requested. All will be closed."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.release_keyboard:3
# 4a28e63b8de04aa685823bbae06ec6a6
msgid "Internal method for widget, to release the real-keyboard. Check :func:`request_keyboard` to understand how it works."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.remove_widget:1
# 2138d5116cdf4b21a25d639ceba4b18a
msgid "Remove a widget from window"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.request_keyboard:3
# 3c1003c0741543699d6d8ee023d632e3
msgid "Internal method for widget, to request the keyboard. This method is not intented to be used by end-user, however, if you want to use the real-keyboard (not virtual keyboard), you don't want to share it with another widget."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.request_keyboard:8
# a03bea95cb36488186a137967d42d7ee
msgid "A widget can request the keyboard, indicating a callback to call when the keyboard will be released (or taken by another widget)."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.request_keyboard:13
# 6de23c4aacba4641b4d62c5e34d55dc5
msgid "Callback that will be called when the keyboard is closed. It can be because somebody else requested the keyboard, or if the user itself closed it."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.request_keyboard:17
# 3b3ef457c48144f09038a760290b228c
msgid "Attach the keyboard to the specified target. Ensure you have a target attached if you're using the keyboard in a multi users mode."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.request_keyboard:22
# a97044efa4994ade9a8755c5dd65a405
msgid "An instance of :class:`Keyboard`, containing the callback, target, and if configuration allowed it, a VKeyboard instance."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.screenshot:1
# 5bad9795f1c647439ee9f6e7743bc4d5
msgid "Save the actual displayed image in a file"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.set_icon:1
# 7a6e52f8fa7b43bf99ec2e443b9a7c0f
msgid "Set the icon of the window"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.set_title:1
# a160ac42e6ec4ddd8b8243bc8011217e
msgid "Set the window title."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.set_vkeyboard_class:3
# 49303e7c5a79416c8f7d97c0eaf1f7e7
msgid "Set the VKeyboard class to use. If None set, it will use the :class:`kivy.uix.vkeyboard.VKeyboard`."
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.size:1
# 85e8c13b41e54306a5dc9f8c54a2bca3
msgid "Rotated size of the window"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.system_size:1
# 881825bf3db8444ca270752b16761ccd
msgid "Real size of the window, without taking care of the rotation"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.toggle_fullscreen:1
# 72666b3f364c4957afa22276f6e8844b
msgid "Toggle fullscreen on window"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.WindowBase.width:1
# e39d2a6c95034f27909a55c7eb28171c
msgid "Rotated window width"
msgstr ""

#: ../../../kivy/core/window/__init__.py:docstring of kivy.core.window.Window:1
# 92bd83eae6014c409cf7ee61e71bcbca
msgid "Instance of a :class:`WindowBase` implementation"
msgstr ""

